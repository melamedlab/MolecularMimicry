---
title: "FigureS5"
format: html
editor: visual
---


# Figure S5


```{r}
#| warning: false
library(seqinr)
library(stringi)
library(clusterProfiler)
library(R.utils)
library(tidyverse)
library(data.table)
library(readxl)
library(biomaRt)
library(treeio)
library(ggtree)
library(ade4)
library(aplot)

out_dir <- "../output/"
source("../../Utilities.R")

meta_path <- "../../Metadata/"
metadata <- openxlsx::read.xlsx(paste0(meta_path, "Final_Cohort_Metadata_v5.xlsx"), sheet = 1)

duplicated_proteins <- read_csv(paste0(meta_path, "duplicated_proteins.csv"))
human_duplicated_proteins <- read_csv(paste0(meta_path, "human_duplicated_or_removed_proteins.csv")) %>%
  dplyr::rename("uniprot" = 1)


tissue_map <- read_tsv(paste0(meta_path, "normal_tissue.tsv"))
organ_map <- read_excel(paste0(meta_path, "Tissue_Groupings.xlsx"))
tissue_organ_map <- merge(tissue_map, organ_map, by.x = "Tissue", by.y = "Var1", all.x = T)
unique(tissue_organ_map$Level)
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "Not detected",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "Not representative",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "N/A",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Reliability != "Uncertain",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Reliability != "NA",]

tissue_organ_map_condensed <- tissue_organ_map %>%
  dplyr::select(Tissue, Gene, `Cell type`, `New Name`) %>%
  group_by(Gene) %>%
  dplyr::summarize(organ_system = gsub("NA;", "", paste(unique(`New Name`), collapse = ";")),
                   tissue = gsub("NA;", "", paste(unique(Tissue), collapse = ";")),
                   cell_type = gsub("NA;", "", paste(unique(`Cell type`), collapse = ";")))

protein_atlas <- read_tsv("../../Databases/proteinatlas_2023-10-15.tsv")


```


## Cell Type Enrichment


```{r}
#| warning: false
setwd("../../12mer_annotated/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)]
## For testing purposes use this subset
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

protein_atlas_celltypes <- protein_atlas %>%
  distinct(Uniprot, `RNA single cell type specific nTPM`) %>%
  separate_longer_delim(`RNA single cell type specific nTPM`, ";") %>%
  mutate(`RNA single cell type specific nTPM` = gsub(":.*", "", `RNA single cell type specific nTPM`)) %>%
  dplyr::rename("cell_type" = `RNA single cell type specific nTPM`,
                "uniprot" = "Uniprot") %>%
  filter(!is.na(cell_type))
output_df <- data.frame(cell_type = unique(protein_atlas_celltypes$cell_type))
for(active_file in files_to_read){
  print(paste0("Starting ", active_file))
  active_data <- fread(active_file, nThread = 16) 
  if(nrow(active_data) == 0){
    next
  }
  active_data <- active_data %>%
    left_join(protein_atlas_celltypes, by = "uniprot") %>%
     distinct(query, query_seqname, query_start, cell_type) 
  
  if(nrow(active_data) == 0 | sum(is.na(active_data$cell_type)) == nrow(active_data)){
    next
  }
  name_replacement <- "Freq"; names(name_replacement) <- gsub("_12mer.*", "", active_file)
 output_df <- output_df %>%
   left_join(as.data.frame(table(active_data$cell_type)) %>%
   dplyr::rename("cell_type" = "Var1") %>%
     dplyr::rename(!!! name_replacement))
    
  print(paste0("Finished with", active_file))

}


```

```{r}

ggc <- output_df %>%
  pivot_longer(cols = -cell_type) %>%
  mutate(value = as.numeric(value)) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  group_by(name, cell_type) %>%
  dplyr::summarize(count = sum(value)) %>%
  mutate(total = sum(count)) %>%
  mutate(freq = count / total *100) %>%
  mutate(Proteome.ID = gsub(".*_UP", "UP", gsub("_12mer.*", "", name))) %>%
  left_join(metadata) %>%
   mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
  dplyr::rename("label" = "Taxon.mnemonic") %>%
  ggplot(aes(x=cell_type, y=label)) +
  geom_tile(aes(fill = freq)) +
  theme_classic() +
  scale_fill_gradientn(colours = c("#045375", "#089099", "#7CCBA2", "#FCDE9C", "#F0746E"),
                       name = "Cell Type (%)") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.title.y = element_blank()) +
  xlab("Cell Type")
ggc


```


## Organ and Tissue Enrichment


```{r}
#| warning: false
setwd("../../12mer_annotated/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)]
## For testing purposes use this subset
files_to_read <- files_to_read[grepl(paste(metadata$`Proteome.ID`[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

out_final <- list()
Organ_df <- data.frame("organ" = unique(tissue_organ_map$`New Name`))
Tissue_df <- data.frame("tissue" = unique(tissue_organ_map$Tissue))
for(active_file in files_to_read){
  print(paste0("Starting ", active_file))
  active_data <- fread(active_file) 
  if(nrow(active_data) == 0){
    next
  }
  active_data <- active_data %>%
    #dplyr::select(-organ_system, -cell_type, -tissue) %>%
    left_join(tissue_organ_map %>% dplyr::rename("ensembl_gene_id" = "Gene")) %>%
     #filter(mismatches == 3) %>%
     filter(Level != "Low") %>%
     filter(Level != "NA") %>% ## TODO decide if this is a problem
     distinct(query, query_seqname, query_start, Tissue, `New Name`) 
  
  if(nrow(active_data) == 0){
    next
  }
  #### TODO Add removal of overlapping enzyme products
  final_data <- active_data %>%
    distinct(query, query_seqname, query_start, `New Name`)
  final_data2 <- active_data %>%
    distinct(query, query_seqname, query_start, `Tissue`)
    
  Organ_df <- merge(Organ_df, as.data.frame(table(final_data$`New Name`)), by.x = "organ", by.y = "Var1" )
     Tissue_df <- merge(Tissue_df, as.data.frame(table(final_data2$Tissue)), by.x = "tissue", by.y = "Var1" )
     colnames(Organ_df)[ncol(Organ_df)] <- gsub("_12mer_3mis_hits.tsv", "", active_file)
     colnames(Tissue_df)[ncol(Tissue_df)] <- gsub("_12mer_3mis_hits.tsv", "", active_file)
     print(paste0("Finished with", active_file))

}


```

```{r}
ggt <- Tissue_df %>%
  pivot_longer(cols = -tissue) %>%
  mutate(value = as.numeric(value)) %>%
  group_by(name, tissue) %>%
  dplyr::summarize(count = sum(value)) %>%
  mutate(total = sum(count)) %>%
  mutate(freq = count / total *100) %>%
  mutate(Proteome.ID = gsub(".*_UP", "UP", gsub("_12mer.*", "", name))) %>%
  left_join(metadata) %>%
   mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
  dplyr::rename("label" = "Taxon.mnemonic") %>%
  ggplot(aes(x=tissue, y=label)) +
  geom_tile(aes(fill = freq)) +
  theme_classic() +
  scale_fill_gradientn(colours = c("#045375", "#089099", "#7CCBA2", "#FCDE9C", "#F0746E"),
                       name = "Tissue (%)") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.text.y = element_blank(),
        axis.title.y = element_blank()) +
  xlab("Tissue")
ggt

ggo <- Organ_df %>%
  pivot_longer(cols = -organ) %>%
  mutate(value = as.numeric(value)) %>%
  group_by(name, organ) %>%
  dplyr::summarize(count = sum(value)) %>%
  mutate(total = sum(count)) %>%
  mutate(freq = count / total *100) %>%
  mutate(Proteome.ID = gsub(".*_UP", "UP", gsub("_12mer.*", "", name))) %>%
  left_join(metadata) %>%
   mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
  dplyr::rename("label" = "Taxon.mnemonic") %>%
  ggplot(aes(x=organ, y=label)) +
  geom_tile(aes(fill = freq)) +
  theme_classic() +
  scale_fill_gradientn(colours = c("#045375", "#089099", "#7CCBA2", "#FCDE9C", "#F0746E"),
                       name = "Organ System (%)") +
  theme(axis.text.x = element_text(angle = 90, vjust = 0.5, hjust=1),
        axis.text.y = element_blank(),
        axis.title.y = element_blank()) +
  xlab("Organ System")
ggo


viruses <- Organ_df %>%
  pivot_longer(cols = -organ) %>%
  mutate(value = as.numeric(value)) %>%
  group_by(name, organ) %>%
  dplyr::summarize(count = sum(value)) %>%
  mutate(total = sum(count)) %>%
  mutate(freq = count / total *100) %>%
  mutate(Proteome.ID = gsub(".*_UP", "UP", gsub("_12mer.*", "", name)))

```


### Panel assembly


```{r}
#| warning: false
taxa <- metadata %>% as.data.frame() %>%
  mutate(Taxon.mnemonic = ifelse(is.na(Taxon.mnemonic),
                                 "Simian virus 5", Taxon.mnemonic)) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
  filter(Proteome.ID %in% viruses$`Proteome.ID`) %>%
  column_to_rownames("Taxon.mnemonic") %>%
  dplyr::select(family, order, class, phylum, kingdom) %>%
  as.data.frame()
taxa[taxa$family == "Anelloviridae",] <- "Anelloviridae"
taxa[taxa$family == "Kolmioviridae",] <- "Kolmioviridae"

check <- as.data.frame(lapply(taxa, as.factor), stringsAsFactors =TRUE)
rownames(check) <- rownames(taxa)
check <- check[complete.cases(check),]
tmp <- taxo2phylog(as.taxo(check), root="Root", abbrev=F)

tax.phy <- as.phylo(tmp)


gg_tree <- ggtree(tax.phy, branch.length='none')
gg_tree

gg_tree[["data"]] <- gg_tree[["data"]] %>% 
  left_join(metadata %>%
               mutate(Taxon.mnemonic = ifelse(is.na(Taxon.mnemonic),
                                 "Simian virus 5", Taxon.mnemonic)) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
    dplyr::select(Taxon.mnemonic, family), by = c("label" = "Taxon.mnemonic"))

gg_tree <-  gg_tree + geom_hilight(mapping=aes(subset = family %in% names(Family_palette_v2),fill = family), alpha = 0.8) +
   scale_fill_manual(values = Family_palette_v2, name = "Viral Family")


ggc %>%
  insert_right(ggt, width = 0.5) %>%
  insert_right(ggo, width = 0.15) %>%
  insert_left(gg_tree, width = 0.05)
ggsave(paste0(out_dir, "FigureS5.pdf"), width = 20, height = 17)
```


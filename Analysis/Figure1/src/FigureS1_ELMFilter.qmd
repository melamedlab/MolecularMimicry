---
title: "FigureS1"
format: html
editor: visual
---

## Figure S1

```{r load_in}
#| message: false
#| warning: false
setwd("/stor/work/Melamed_COVID/Cole/git_clones/MolecularMimicry/Analysis/Figure1/src/")
library(Biostrings)
library(tidyverse)
library(data.table)
library(dtplyr)
library(plyr)
library(readxl)
library(readr)
library(RColorBrewer)
library(openxlsx)
library(ggbeeswarm)
library(ggpubr)
library(scales)
library(wesanderson)
library(aplot)
library(cowplot)
library(biomaRt)
library(treeio)
library(ggtree)
library(ade4)
library(aplot)
library(ggbeeswarm)

### mart <- useMart('ENSEMBL_MART_ENSEMBL')
### mart <- useDataset('hsapiens_gene_ensembl', mart)
mart <- useEnsembl("ensembl", dataset = "hsapiens_gene_ensembl") ## , mirror = "useast"
mart_retrieved <- getBM(
  mart = mart, useCache = T,
  attributes = c(
    'ensembl_gene_id',
    'entrezgene_id',
    'external_gene_name',
    'uniprot_gn_symbol',
    'uniprot_gn_id',
    'chromosome_name',
    'description'),
  uniqueRows=TRUE)
elm_classes <- read_tsv("../../Databases/elm_classes.tsv", skip = 5)
elm_classes_human <- read_tsv("../../Databases/elm_instances_human.tsv", skip = 5)

source("../../Utilities.R")
```

```{r supp_data}
#| message: false
meta_path <- "../../Metadata/"
metadata <- openxlsx::read.xlsx(paste0(meta_path, "Final_Cohort_Metadata_v5.xlsx"), sheet = 1)

duplicated_proteins <- read_csv(paste0(meta_path, "duplicated_proteins.csv"))
human_duplicated_proteins <- read_csv(paste0(meta_path, "human_duplicated_or_removed_proteins.csv")) %>%
  dplyr::rename("uniprot" = 1)

proteome_metadata <- read_tsv(paste0(meta_path, "uniprot_proteome_metadata.tsv"))
viral_protein_metadata <- read_excel(paste0(meta_path, "uniprot_viral_protein_metadata.xlsx"))
colnames(viral_protein_metadata) <- paste0(gsub(" ", "_", tolower(colnames(viral_protein_metadata))), ".viral")
human_protein_metadata <- read_excel(paste0(meta_path, "uniprot_protein_metadata.xlsx"))
colnames(human_protein_metadata) <- paste0(gsub(" ", "_", tolower(colnames(human_protein_metadata))), ".human")
out.tmp <- list()
for(i in 1:nrow(human_protein_metadata)){ #nrow(human_protein_metadata)
 out.tmp[i] <-  list(as.numeric(gsub("VARIANT ", "", unlist(regmatches(human_protein_metadata$natural_variant.human[i], gregexpr("VARIANT [0-9]*", human_protein_metadata$natural_variant.human[i]))))))
}
human_protein_metadata$human_variants <- out.tmp


tissue_map <- read_tsv(paste0(meta_path, "normal_tissue.tsv"))
organ_map <- read_excel(paste0(meta_path, "Tissue_Groupings.xlsx"))
tissue_organ_map <- merge(tissue_map, organ_map, by.x = "Tissue", by.y = "Var1", all.x = T)
unique(tissue_organ_map$Level)
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "Not detected",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "Not representative",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "N/A",]

unique(tissue_organ_map$Reliability)
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Reliability != "Uncertain",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Reliability != "NA",]

tissue_organ_map_condensed <- tissue_organ_map %>%
  dplyr::select(Tissue, Gene, `Cell type`, `New Name`) %>%
  group_by(Gene) %>%
  dplyr::summarize(organ_system = gsub("NA;", "", paste(unique(`New Name`), collapse = ";")),
                   tissue = gsub("NA;", "", paste(unique(Tissue), collapse = ";")),
                   cell_type = gsub("NA;", "", paste(unique(`Cell type`), collapse = ";")))


out_dir <- "../output/"
```

## ELM location identification

```{r}
#| eval: false
## This takes a while to run, the generated file is already on the github (so could be and by default is a skipped chunk)
files_to_read <- list.files("../../../epitope_alignment/Viral_Proteomes/Final_Cohort/")
elm_instance_df <- data.frame()
for(active_virus in files_to_read){
  print(paste0("On ", match(active_virus, files_to_read), " virus out of ", length(files_to_read)))
  print(active_virus)
  active_virus_proteome <- seqinr::read.fasta(file = paste0("../../../epitope_alignment/Viral_Proteomes/Final_Cohort/", active_virus), as.string = T, seqtype = "AA")
  for(active_protein in active_virus_proteome){
    for(active_elm_class in elm_classes$Regex){
      
      tmp <- stringr::str_locate_all(active_protein[1], active_elm_class)
      tmp <- as.data.frame(tmp)
      if(nrow(tmp) == 0){next} ## was originally active_elm_class by accident
      tmp <- as.data.frame(tmp) %>%
        mutate(viral_protein = attr(active_protein,"Annot"),
               Regex = active_elm_class,
               File_name = active_virus,
               Proteome.ID = gsub(".*_UP", "UP", gsub(".fasta.gz", "", active_virus)))
      elm_instance_df <- rbind.data.frame(elm_instance_df, tmp)
    }
  }
}

elm_instance_df <- elm_instance_df %>%
  left_join(elm_classes %>% distinct(Accession, ELMIdentifier, FunctionalSiteName, Description, Regex, Probability))
 
fwrite(elm_instance_df, "/stor/work/Melamed_COVID/Cole/git_clones/MolecularMimicry/Analysis/Key_Data/elm_labeled_viral_sequences_v2.csv.gz")
```

## 8mer Data Annotation

```{r data_annotate_8mer}
#| eval: false
## This will only run for files that haven't ran already
setwd("../../../epitope_alignment/Results/Complete_Final_Set_8mers_3mis/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".tsv", files_to_read)]
files_completed <- list.files("../../../Analysis/8mer_annotated/")
files_to_read <- files_to_read[!gsub(".tsv.gz", "", files_to_read) %in% gsub(".csv.gz", "", files_completed)]
final_cohort_naming <- list.files("../../Viral_Proteomes/Final_Cohort")
final_cohort_naming <- paste0(gsub(".fasta.gz", "_8mer_3mis_hits.tsv.gz", final_cohort_naming))
files_to_read <- files_to_read[files_to_read %in% final_cohort_naming]

files_to_read<- files_to_read[order(file.info(files_to_read)$size)]

for(active_file in files_to_read){
  print(paste0("Starting ", active_file, " ", Sys.time()))
  active_data <- fread(active_file, sep = "\t", nThread = 12)
  if(nrow(active_data) == 0){
    print(paste0("Skipping ", active_file, " due to lack of data."))
    next
  }

 active_data[, uniprot := id_split_fast(target_seqname), by = seq_len(nrow(active_data))]
 active_data[, viral_id := id_split_fast(query_seqname), by = seq_len(nrow(active_data))]
 active_data[, mismatches := mismatch_calling_fast(query, target), by = seq_len(nrow(active_data))]
  
  print(paste0("Data Merging ", Sys.time()))
  active_data <- active_data %>%
     lazy_dt() %>%
    left_join(mart_retrieved, by = c("uniprot" = "uniprot_gn_id"),
              relationship = "many-to-many") %>%
    left_join(tissue_organ_map_condensed, by = c("ensembl_gene_id" = "Gene")) %>%
    left_join(human_protein_metadata, by = c("uniprot" ="entry.human")) %>%
    left_join(viral_protein_metadata, by = c("viral_id" = "entry.viral")) %>%
    mutate(catalytic_activity.same = catalytic_activity.human == catalytic_activity.viral) %>%
    mutate(reaction.human = gsub(";.*", "", catalytic_activity.human)) %>%
    mutate(reaction.viral = gsub(";.*", "", catalytic_activity.viral)) %>%
    mutate(reaction.same = reaction.human == reaction.viral) %>%
    mutate(reaction.same = ifelse(is.na(reaction.same), FALSE, reaction.same)) %>%
    mutate(catalytic_activity.same = ifelse(is.na(catalytic_activity.same), FALSE, catalytic_activity.same)) %>%
    mutate(enzyme_number.same = FALSE) %>%
    as.data.table()
  
  print(paste0("EC Screening ", Sys.time()))
  active_data[, enzyme_number.same := fast_ec_screen(ec_number.human, ec_number.viral), by = seq_len(nrow(active_data))]

  print(paste0("Final Cleaning ", Sys.time()))
  active_data_subset <- active_data %>% 
   mutate(human_variants = sapply(human_variants, toString)) %>%
    dplyr::select(query, query_seqname, query_start, target_seqname, target_start,
           target, mismatches, uniprot, viral_id, ensembl_gene_id,
           entrezgene_id, external_gene_name, uniprot_gn_symbol, chromosome_name,
           reviewed.human, entry_name.human, protein_names.human, length.human,
           active_site.human, binding_site.human, dna_binding.human,
           ec_number.human,  reviewed.viral, entry_name.viral,
           protein_names.viral, length.viral,
           active_site.viral, binding_site.viral, dna_binding.viral,
           ec_number.viral, catalytic_activity.same, reaction.human,
           reaction.viral, reaction.same,
           enzyme_number.same) %>%
    as.data.frame()
  Sys.time()
  fwrite(active_data_subset, paste0("../../../Analysis/8mer_annotated/", gsub(".tsv", ".csv", active_file)), row.names = FALSE, compress = "gzip", nThread = 12)
  rm(active_data, active_data_subset)
  gc()
}
```

## 8mer Data Load and Processing

```{r data_processing_8mer}
#| eval: false
### This only needs to be run once and will take a while, the script when not full render unless you already have the output in the expected path or if you set message: true
library(seqinr)
library(stringi)
library(svMisc)
mode = "tight_elm"
kmer_length = 8
elm_instance_df <- fread("../../Key_Data/elm_labeled_viral_sequences_v2.csv.gz")
elm_db_expand <- elm_instance_df %>% distinct(viral_protein, start, end, Regex) %>%
                  mutate(viral_protein = gsub(">", "", viral_protein)) %>%
  rowwise() %>%
  do(data.frame(query_seqname = .$viral_protein, query_start =(.$start-(kmer_length-1)):.$end)) %>%
  mutate(in_elm = TRUE) %>%
  distinct() %>%
  arrange(query_seqname)


Sys.time()
files_to_read <- list.files("../../8mer_annotated",full.names = TRUE)
files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)]
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

out_final <- data.frame(mismatches = c("0", "1", "2", "3", "Number of Proteins", "Proteome Length"))
out_protein_final <- data.frame()
out_protein_final_min <- data.frame()
out_protein_final_count <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file, " Pathogen number:",match(active_file, files_to_read), "/", length(files_to_read)))
  active_data <- fread(active_file, nThread = 18) %>% as.data.frame()
  
  if(nrow(active_data) == 0){
    out_final[,gsub("_8mer_3mis_hits.csv.gz", "", active_file)] <- c(0,0,0,0,NA,NA)
      data <- try(seqinr::read.fasta(file = paste0("../../../epitope_alignment/Viral_Proteomes/Final_Cohort/", gsub("../../8mer_annotated/", "", gsub("_8mer_3mis_hits.csv.gz", "", active_file)), ".fasta.gz"), seqtype = "AA", as.string = TRUE, set.attributes = FALSE), silent = TRUE)
    if(class(data) == "try-error"){
        PLength <- "Error"
        PCount <- "Error"
    } else {
      PLength <- nchar(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
      PCount <- length(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
    }
     
      out_final[6, ncol(out_final)] <- sum(PLength)
      out_final[5, ncol(out_final)] <- PCount
      
    next
  }
  
  active_data <- active_data  %>%
    ## Remove duplicated pathogen proteins identified in 
    ## ../../Scripts/Duplicate_Protein_Screen.R
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot) %>%
    dplyr::select(query, query_seqname, query_start, mismatches, reaction.human,
           reaction.viral, reaction.same, catalytic_activity.same,
           ec_number.human, ec_number.viral,
           enzyme_number.same, external_gene_name)
  
   if(mode == "tight_elm"){
    active_data <- active_data %>%
      anti_join(elm_db_expand, by = c("query_seqname", "query_start"))
  } 
  
  active_data$reaction.same[is.na(active_data$reaction.same)] <- FALSE
  active_data$catalytic_activity.same[is.na(active_data$catalytic_activity.same)] <- FALSE
  
  active_data <- as.data.frame(active_data)

  active_data <- active_data %>%
    filter(reaction.same != TRUE & catalytic_activity.same != TRUE) %>%
    filter(enzyme_number.same != TRUE)  
    
  out <- as.data.frame(table(active_data$mismatches))
  if(nrow(out) == 0){out <- data.frame(mismatches = c(0,1,2,3), V2 = c(0,0,0,0))}
  colnames(out) <- c("mismatches", gsub("_8mer_3mis_hits.csv.gz", "", active_file))
  
  
  out_protein <- active_data %>%
     distinct(query, query_seqname, query_start, mismatches) %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
    group_by(query_seqname, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
  
   out_protein_min <- active_data %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
     distinct(query_seqname, query_start, mismatches) %>%
    group_by(query_seqname, query_start) %>%
    slice_min(mismatches, n=1) %>%
    ungroup() 
   
   out <- as.data.frame(table(out_protein_min$mismatches))
  if(nrow(out) == 0){out <- data.frame(mismatches = c(0,1,2,3), V2 = c(0,0,0,0))}
  colnames(out) <- c("mismatches", gsub("_8mer_3mis_hits.csv.gz", "", active_file))
   
     out_protein_min <- out_protein_min %>% group_by(query_seqname, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
   
     
     out_protein_count <- active_data %>%
       distinct(query, query_seqname, query_start, mismatches, external_gene_name) %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
       distinct(query, query_seqname, query_start, external_gene_name, mismatches) %>%
       filter(!external_gene_name %in% c(NA, "", " ")) %>%
    group_by(query_seqname, query_start, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
  
  ############## Count Proteome Length ##############
  data <- try(seqinr::read.fasta(file = paste0("../../../epitope_alignment/Viral_Proteomes/Final_Cohort/",  gsub("../../8mer_annotated/", "", gsub("_8mer_3mis_hits.csv.gz", "", active_file)), ".fasta.gz"), seqtype = "AA", as.string = TRUE, set.attributes = FALSE), silent = TRUE)
    if(class(data) == "try-error"){
        PLength <- "Error"
        PCount <- "Error"
      } else {
       PLength <- nchar(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
      PCount <- length(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
    }
  
  out_final <- merge(out_final, out, by = "mismatches", all.x = T)
  out_final[6, ncol(out_final)] <- sum(PLength)
  out_final[5, ncol(out_final)] <- PCount
  
   out_protein_tmp <- out_protein %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))
  out_protein_tmp_min <- out_protein_min %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))
  out_protein_tmp_count <- out_protein_count %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))

  out_protein_final <- rbind.data.frame(out_protein_final, out_protein_tmp)
  out_protein_final_min <- rbind.data.frame(out_protein_final_min, out_protein_tmp_min)
  out_protein_final_count <- rbind.data.frame(out_protein_final_count, out_protein_tmp_count)
}

Sys.time()
# write.csv(out_final, "../../Key_Data/8mer_proteome_everything_elmfilter_regex.csv")
# write.csv(out_protein_final, "../../Key_Data/8mer_proteome_protein_everything_elmfilter_regex.csv")
# write.csv(out_protein_final_min, "../../Key_Data/8mer_proteome_protein_everything_min_elmfilter_regex.csv")
# write.csv(out_protein_final_count, "../../Key_Data/8mer_proteome_protein_everything_count_elmfilter_regex.csv")

```

## 12mer Data Annotation

```{r data_annotate_12mer}
#| eval: false
## This will only run for files that haven't ran already
setwd("../../../epitope_alignment/Results/Complete_Final_Set/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".tsv", files_to_read)]
files_completed <- list.files("../../../Analysis/12mer_annotated/")
#files_to_read <- files_to_read[!gsub(".tsv", "", files_to_read) %in% gsub(".csv.gz", "", files_completed)]

files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID, collapse = "|"), files_to_read)]

files_to_read <- files_to_read[order(file.info(files_to_read)$size)]

for(active_file in files_to_read){
  print(paste0("Starting ", active_file, " ", Sys.time()))
  active_data <- fread(active_file, sep = "\t", nThread = 12)
  if(nrow(active_data) == 0){
    print(paste0("Skipping ", active_file, " due to lack of data."))
    next
  }

 active_data[, uniprot := id_split_fast(target_seqname), by = seq_len(nrow(active_data))]
 active_data[, viral_id := id_split_fast(query_seqname), by = seq_len(nrow(active_data))]
 active_data[, mismatches := mismatch_calling_fast(query, target), by = seq_len(nrow(active_data))]
  
  print(paste0("Data Merging ", Sys.time()))
  active_data <- active_data %>%
     lazy_dt() %>%
    left_join(mart_retrieved, by = c("uniprot" = "uniprot_gn_id"),
              relationship = "many-to-many") %>%
    left_join(tissue_organ_map_condensed, by = c("ensembl_gene_id" = "Gene")) %>%
    left_join(human_protein_metadata, by = c("uniprot" ="entry.human")) %>%
    left_join(viral_protein_metadata, by = c("viral_id" = "entry.viral")) %>%
    mutate(catalytic_activity.same = catalytic_activity.human == catalytic_activity.viral) %>%
    mutate(reaction.human = gsub(";.*", "", catalytic_activity.human)) %>%
    mutate(reaction.viral = gsub(";.*", "", catalytic_activity.viral)) %>%
    mutate(reaction.same = reaction.human == reaction.viral) %>%
    mutate(reaction.same = ifelse(is.na(reaction.same), FALSE, reaction.same)) %>%
    mutate(catalytic_activity.same = ifelse(is.na(catalytic_activity.same), FALSE, catalytic_activity.same)) %>%
    mutate(enzyme_number.same = FALSE) %>%
    as.data.table()
  
  print(paste0("EC Screening ", Sys.time()))
  active_data[, enzyme_number.same := fast_ec_screen(ec_number.human, ec_number.viral), by = seq_len(nrow(active_data))]

  print(paste0("Final Cleaning ", Sys.time()))
  active_data_subset <- active_data %>% 
   mutate(human_variants = sapply(human_variants, toString)) %>%
    dplyr::select(query, query_seqname, query_start, target_seqname, target_start,
           target, mismatches, uniprot, viral_id, ensembl_gene_id,
           entrezgene_id, external_gene_name, uniprot_gn_symbol, chromosome_name,
           reviewed.human, entry_name.human, protein_names.human, length.human,
           active_site.human, binding_site.human, dna_binding.human,
           ec_number.human,  reviewed.viral, entry_name.viral,
           protein_names.viral, length.viral,
           active_site.viral, binding_site.viral, dna_binding.viral,
           ec_number.viral, catalytic_activity.same, reaction.human,
           reaction.viral, reaction.same,
           enzyme_number.same, human_variants) %>%
    as.data.frame()
  Sys.time()
  ##fwrite(active_data_subset, paste0("../../../Analysis/12mer_annotated/", gsub(".tsv", ".csv.gz", active_file)), row.names = FALSE, compress = "gzip", nThread = 12)
  rm(active_data, active_data_subset)
  gc()
}
```

## 12mer Data Load and Processing

```{r data_processing_12mer}
#| eval: false
### This only needs to be run once and will take a while, the script when not full render unless you already have the output in the expected path or if you set message: true
library(seqinr)
library(stringi)
library(svMisc)
elm_instance_df <- fread("../../Key_Data/elm_labeled_viral_sequences_v2.csv.gz")
setwd("../../12mer_annotated/")
mode = "tight_elm"
kmer_length = 12

Sys.time()
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)]

files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]
out_final <- data.frame(mismatches = c("0", "1", "2", "3", "Number of Proteins", "Proteome Length"))
out_protein_final <- data.frame()
out_protein_final_min <- data.frame()
out_protein_final_count <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file, " Pathogen number:",match(active_file, files_to_read), "/", length(files_to_read)))
  active_data <- fread(active_file, nThread = 18) %>% as.data.frame()

  if(nrow(active_data) == 0){
    out_final[,gsub("_12mer_3mis_hits.csv.gz", "", active_file)] <- c(0,0,0,0,NA,NA)
      data <- try(seqinr::read.fasta(file = paste0("../../epitope_alignment/Viral_Proteomes/Final_Cohort/", gsub("_12mer_3mis_hits.csv.gz", "", active_file), ".fasta.gz"), seqtype = "AA", as.string = TRUE, set.attributes = FALSE), silent = TRUE)
    if(class(data) == "try-error"){
        PLength <- "Error"
        PCount <- "Error"
    } else {
      PLength <- nchar(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
      PCount <- length(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
    }
     
      out_final[6, ncol(out_final)] <- sum(PLength)
      out_final[5, ncol(out_final)] <- PCount
      
    next
  }
  
  active_data <- active_data  %>%
    ## Remove duplicated pathogen proteins identified in 
    ## ../../Scripts/Duplicate_Protein_Screen.R
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot) %>%
    dplyr::select(query, query_seqname, query_start, mismatches, reaction.human,
           reaction.viral, reaction.same, catalytic_activity.same,
           ec_number.human, ec_number.viral,
           enzyme_number.same, external_gene_name)
  
  active_data$reaction.same[is.na(active_data$reaction.same)] <- FALSE
  active_data$catalytic_activity.same[is.na(active_data$catalytic_activity.same)] <- FALSE
  
  active_data <- as.data.frame(active_data)

  active_data <- active_data %>%
    filter(reaction.same != TRUE & catalytic_activity.same != TRUE) %>%
    filter(enzyme_number.same != TRUE)  
    
  out <- as.data.frame(table(active_data$mismatches))
  if(nrow(out) == 0){out <- data.frame(mismatches = c(0,1,2,3), V2 = c(0,0,0,0))}
  colnames(out) <- c("mismatches", gsub("_12mer_3mis_hits.csv.gz", "", active_file))

  if(mode == "tight_elm"){
    active_data <- active_data %>%
      mutate(query_end = query_start + (kmer_length-1)) %>%
      left_join(elm_instance_df %>% distinct(viral_protein, start, end, Regex) %>%
                  mutate(viral_protein = gsub(">", "", viral_protein)),
                by = c("query_seqname" = "viral_protein")) %>%
      mutate(in_elm = ((query_start >= start & query_start <= end) | (query_end >= start & query_end <= end))) %>%
      group_by(query, query_seqname, query_start, mismatches, external_gene_name) %>%
      slice_max(in_elm) %>%
      distinct(query, query_seqname, query_start, mismatches, external_gene_name, in_elm) %>%
      filter(!in_elm)
  } 
  
  out_protein <- active_data %>%
     distinct(query, query_seqname, query_start, mismatches) %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
    group_by(query_seqname, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
  
   out_protein_min <- active_data %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
     distinct(query_seqname, query_start, mismatches) %>%
    group_by(query_seqname, query_start) %>%
    slice_min(mismatches, n=1) %>%
    ungroup() 
   
   out <- as.data.frame(table(out_protein_min$mismatches))
  if(nrow(out) == 0){out <- data.frame(mismatches = c(0,1,2,3), V2 = c(0,0,0,0))}
  colnames(out) <- c("mismatches", gsub("_12mer_3mis_hits.csv.gz", "", active_file))
   
     out_protein_min <- out_protein_min %>% group_by(query_seqname, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
   
     out_protein_count <- active_data %>%
       distinct(query, query_seqname, query_start, mismatches, external_gene_name) %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
       distinct(query, query_seqname, query_start, external_gene_name, mismatches) %>%
       filter(!external_gene_name %in% c(NA, "", " ")) %>%
    group_by(query_seqname, query_start, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
  
  ############## Count Proteome Length ##############
  data <- try(seqinr::read.fasta(file = paste0("../../epitope_alignment/Viral_Proteomes/Final_Cohort/", gsub("_12mer_3mis_hits.csv.gz", "", active_file), ".fasta.gz"), seqtype = "AA", as.string = TRUE, set.attributes = FALSE), silent = TRUE)
    if(class(data) == "try-error"){
        PLength <- "Error"
        PCount <- "Error"
      } else {
       PLength <- nchar(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
      PCount <- length(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
    }
  
  out_final <- merge(out_final, out, by = "mismatches", all.x = T)
  out_final[6, ncol(out_final)] <- sum(PLength)
  out_final[5, ncol(out_final)] <- PCount
  
   out_protein_tmp <- out_protein %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))
  out_protein_tmp_min <- out_protein_min %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))
  out_protein_tmp_count <- out_protein_count %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))

  out_protein_final <- rbind.data.frame(out_protein_final, out_protein_tmp)
  out_protein_final_min <- rbind.data.frame(out_protein_final_min, out_protein_tmp_min)
  out_protein_final_count <- rbind.data.frame(out_protein_final_count, out_protein_tmp_count)
}

Sys.time()
write.csv(out_final, "../Key_Data/12mer_proteome_everything_elmfilter_regex.csv")
write.csv(out_protein_final, "../Key_Data/12mer_proteome_protein_everything_elmfilter_regex.csv")
write.csv(out_protein_final_min, "../Key_Data/12mer_proteome_protein_everything_min_elmfilter_regex.csv")
write.csv(out_protein_final_count, "../Key_Data/12mer_proteome_protein_everything_count_elmfilter_regex.csv")
```

## 18mer Data Annotation

```{r data_annotate_18mer}
#| eval: false
## This will only run for files that haven't ran already
setwd("../../../epitope_alignment/Results/Complete_Final_Set_18mer_3mis/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".tsv", files_to_read)]
files_completed <- list.files("../../../Analysis/18mer_annotated/")
files_to_read <- files_to_read[!gsub(".tsv", "", files_to_read) %in% gsub(".csv.gz", "", files_completed)]

files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID, collapse = "|"), files_to_read)]

files_to_read <- files_to_read[order(file.info(files_to_read)$size)]

for(active_file in files_to_read){
  print(paste0("Starting ", active_file, " ", Sys.time()))
  active_data <- fread(active_file, sep = "\t", nThread = 12)
  if(nrow(active_data) == 0){
    print(paste0("Skipping ", active_file, " due to lack of data."))
    fwrite(active_data, paste0("../../../Analysis/18mer_annotated/", gsub(".tsv", ".csv.gz", active_file)), row.names = FALSE, compress = "gzip", nThread = 12)
    next
  }

 active_data[, uniprot := id_split_fast(target_seqname), by = seq_len(nrow(active_data))]
 active_data[, viral_id := id_split_fast(query_seqname), by = seq_len(nrow(active_data))]
 active_data[, mismatches := mismatch_calling_fast(query, target), by = seq_len(nrow(active_data))]
  
  print(paste0("Data Merging ", Sys.time()))
  active_data <- active_data %>%
     lazy_dt() %>%
    left_join(mart_retrieved, by = c("uniprot" = "uniprot_gn_id"),
              relationship = "many-to-many") %>%
    left_join(tissue_organ_map_condensed, by = c("ensembl_gene_id" = "Gene")) %>%
    left_join(human_protein_metadata, by = c("uniprot" ="entry.human")) %>%
    left_join(viral_protein_metadata, by = c("viral_id" = "entry.viral")) %>%
    mutate(catalytic_activity.same = catalytic_activity.human == catalytic_activity.viral) %>%
    mutate(reaction.human = gsub(";.*", "", catalytic_activity.human)) %>%
    mutate(reaction.viral = gsub(";.*", "", catalytic_activity.viral)) %>%
    mutate(reaction.same = reaction.human == reaction.viral) %>%
    mutate(reaction.same = ifelse(is.na(reaction.same), FALSE, reaction.same)) %>%
    mutate(catalytic_activity.same = ifelse(is.na(catalytic_activity.same), FALSE, catalytic_activity.same)) %>%
    mutate(enzyme_number.same = FALSE) %>%
    as.data.table()
  
  print(paste0("EC Screening ", Sys.time()))
  active_data[, enzyme_number.same := fast_ec_screen(ec_number.human, ec_number.viral), by = seq_len(nrow(active_data))]

  print(paste0("Final Cleaning ", Sys.time()))
  active_data_subset <- active_data %>% 
   mutate(human_variants = sapply(human_variants, toString)) %>%
    dplyr::select(query, query_seqname, query_start, target_seqname, target_start,
           target, mismatches, uniprot, viral_id, ensembl_gene_id,
           entrezgene_id, external_gene_name, uniprot_gn_symbol, chromosome_name,
           reviewed.human, entry_name.human, protein_names.human, length.human,
           active_site.human, binding_site.human, dna_binding.human,
           ec_number.human,  reviewed.viral, entry_name.viral,
           protein_names.viral, length.viral,
           active_site.viral, binding_site.viral, dna_binding.viral,
           ec_number.viral, catalytic_activity.same, reaction.human,
           reaction.viral, reaction.same,
           enzyme_number.same) %>%
    as.data.frame()
  Sys.time()
  fwrite(active_data_subset, paste0("../../../Analysis/18mer_annotated/", gsub(".tsv", ".csv.gz", active_file)), row.names = FALSE, compress = "gzip", nThread = 12)
  rm(active_data, active_data_subset)
  gc()
}
```

## 18mer Data Load and Processing

```{r data_processing_18mer}
#| eval: false
### This only needs to be run once and will take a while, change eval to true if you want to run
library(seqinr)
library(stringi)
library(svMisc)
elm_instance_df <- fread("../../Key_Data/elm_labeled_viral_sequences_v2.csv.gz")
setwd("../../18mer_annotated/")
mode = "tight_elm"
kmer_length = 18

Sys.time()
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)]
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]
out_final <- data.frame(mismatches = c("0", "1", "2", "3", "Number of Proteins", "Proteome Length"))

out_protein_final <- data.frame()
out_protein_final_min <- data.frame()
out_protein_final_count <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file, " Pathogen number:",match(active_file, files_to_read), "/", length(files_to_read)))
  active_data <- fread(active_file, nThread = 18) %>% as.data.frame()

  if(nrow(active_data) == 0){
    out_final[,gsub("_18mer_3mis_hits.csv.gz", "", active_file)] <- c(0,0,0,0,NA,NA)
      data <- try(seqinr::read.fasta(file = paste0("../../epitope_alignment/Viral_Proteomes/Final_Cohort/", gsub("_18mer_3mis_hits.csv.gz", "", active_file), ".fasta.gz"), seqtype = "AA", as.string = TRUE, set.attributes = FALSE), silent = TRUE)
    if(class(data) == "try-error"){
        PLength <- "Error"
        PCount <- "Error"
    } else {
      PLength <- nchar(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
      PCount <- length(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
    }
     
      out_final[6, ncol(out_final)] <- sum(PLength)
      out_final[5, ncol(out_final)] <- PCount
      
    next
  }
  
  active_data <- active_data  %>%
    ## Remove duplicated pathogen proteins identified in 
    ## ../../Scripts/Duplicate_Protein_Screen.R
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot) %>%
    dplyr::select(query, query_seqname, query_start, mismatches, reaction.human,
           reaction.viral, reaction.same, catalytic_activity.same,
           ec_number.human, ec_number.viral,
           enzyme_number.same, external_gene_name)
  
  active_data$reaction.same[is.na(active_data$reaction.same)] <- FALSE
  active_data$catalytic_activity.same[is.na(active_data$catalytic_activity.same)] <- FALSE
  
  active_data <- as.data.frame(active_data)

  active_data <- active_data %>%
    filter(reaction.same != TRUE & catalytic_activity.same != TRUE) %>%
    filter(enzyme_number.same != TRUE)  
    
  out <- as.data.frame(table(active_data$mismatches))
  if(nrow(out) == 0){out <- data.frame(mismatches = c(0,1,2,3), V2 = c(0,0,0,0))}
  colnames(out) <- c("mismatches", gsub("_18mer_3mis_hits.csv.gz", "", active_file))
  
   if(mode == "tight_elm"){
    active_data <- active_data %>%
      mutate(query_end = query_start + (kmer_length-1)) %>%
      left_join(elm_instance_df %>% distinct(viral_protein, start, end, Regex) %>%
                  mutate(viral_protein = gsub(">", "", viral_protein)),
                by = c("query_seqname" = "viral_protein")) %>%
      mutate(in_elm = ((query_start >= start & query_start <= end) | (query_end >= start & query_end <= end))) %>%
      group_by(query, query_seqname, query_start, mismatches, external_gene_name) %>%
      slice_max(in_elm) %>%
      distinct(query, query_seqname, query_start, mismatches, external_gene_name, in_elm) %>%
      filter(!in_elm)
   }
  
  out_protein <- active_data %>%
     distinct(query, query_seqname, query_start, mismatches) %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
    group_by(query_seqname, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
  
   out_protein_min <- active_data %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
     distinct(query_seqname, query_start, mismatches) %>%
    group_by(query_seqname, query_start) %>%
    slice_min(mismatches, n=1) %>%
    ungroup() 
   
   out <- as.data.frame(table(out_protein_min$mismatches))
  if(nrow(out) == 0){out <- data.frame(mismatches = c(0,1,2,3), V2 = c(0,0,0,0))}
  colnames(out) <- c("mismatches", gsub("_18mer_3mis_hits.csv.gz", "", active_file))
   
     out_protein_min <- out_protein_min %>% group_by(query_seqname, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
   
     
     out_protein_count <- active_data %>%
       distinct(query, query_seqname, query_start, mismatches, external_gene_name) %>%
    mutate(query_seqname = gsub(" .*", "", query_seqname)) %>%
       distinct(query, query_seqname, query_start, external_gene_name, mismatches) %>%
       filter(!external_gene_name %in% c(NA, "", " ")) %>%
    group_by(query_seqname, query_start, mismatches) %>%
    dplyr::summarize(count = n()) %>%
    mutate(`Proteome ID`  = gsub("_.*", "",gsub(".*_UP", "UP",active_file)))
  
  ############## Count Proteome Length ##############
  data <- try(seqinr::read.fasta(file = paste0("../../epitope_alignment/Viral_Proteomes/Final_Cohort/", gsub("_18mer_3mis_hits.csv.gz", "", active_file), ".fasta.gz"), seqtype = "AA", as.string = TRUE, set.attributes = FALSE), silent = TRUE)
    if(class(data) == "try-error"){
        PLength <- "Error"
        PCount <- "Error"
      } else {
       PLength <- nchar(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
      PCount <- length(data[!sapply(strsplit(names(data), split="\\|"), function(x) paste(x[2])) %in% duplicated_proteins$viral_uniprot])
    }
  
  out_final <- merge(out_final, out, by = "mismatches", all.x = T)
  out_final[6, ncol(out_final)] <- sum(PLength)
  out_final[5, ncol(out_final)] <- PCount
  
   out_protein_tmp <- out_protein %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))
  out_protein_tmp_min <- out_protein_min %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))
  out_protein_tmp_count <- out_protein_count %>%
    left_join(as.data.frame(PLength) %>% rownames_to_column("query_seqname"))

  out_protein_final <- rbind.data.frame(out_protein_final, out_protein_tmp)
  out_protein_final_min <- rbind.data.frame(out_protein_final_min, out_protein_tmp_min)
  out_protein_final_count <- rbind.data.frame(out_protein_final_count, out_protein_tmp_count)
}

Sys.time()
write.csv(out_final, "../Key_Data/18mer_proteome_everything_elmfilter_regex.csv")
write.csv(out_protein_final, "../Key_Data/18mer_proteome_protein_everything_elmfilter_regex.csv")
write.csv(out_protein_final_min, "../Key_Data/18mer_proteome_protein_everything_min_elmfilter_regex.csv")
write.csv(out_protein_final_count, "../Key_Data/18mer_proteome_protein_everything_count_elmfilter_regex.csv")
```

## Panel D

```{r, panel_c}
#| warning: false
out_final<- read.csv("../../Key_Data/8mer_proteome_everything_elmfilter_regex.csv", row.names = 1)
mismatch_data <- t(out_final)
colnames(mismatch_data) <- mismatch_data[1,]
mismatch_data <- as.data.frame(mismatch_data[-1,])
mismatch_data$ID <- gsub(".*UP", "UP", rownames(mismatch_data))

mismatch_data_meta <- mismatch_data %>%
  inner_join(metadata, by = c("ID" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 ID, Taxon.mnemonic))%>%
  mutate_at(c("0", "1", "2", "3"), as.numeric) %>%
  rowwise() %>%
  mutate(`3` = sum(`0`, `1`, `2`, `3`,na.rm = T),
         `2` = sum(`0`, `1`, `2`,na.rm = T),
         `1` = sum(`0`, `1`,na.rm = T)) %>%
  ungroup()
mismatch_data_meta$`0`[is.na(mismatch_data_meta$`0`)] <- 0
mismatch_data_meta$`1`[is.na(mismatch_data_meta$`1`)] <- 0
mismatch_data_meta$`2`[is.na(mismatch_data_meta$`2`)] <- 0
mismatch_data_meta$`3`[is.na(mismatch_data_meta$`3`)] <- 0

mismatch_data_meta$`0_corrected` <- as.numeric(mismatch_data_meta$`0`) / (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`1_corrected` <- as.numeric(mismatch_data_meta$`1`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`2_corrected` <- as.numeric(mismatch_data_meta$`2`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`3_corrected` <- as.numeric(mismatch_data_meta$`3`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100

xlsx::write.xlsx(mismatch_data_meta, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "8mers", col.names = TRUE, row.names = TRUE)

testing_data <- mismatch_data_meta %>%
  filter(grepl("Virus", Taxonomic.lineage)) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  filter(Chronic.or.Acute %in% c("Acute", "Chronic"))

wt <- compare_means(data = testing_data, formula = value ~ Chronic.or.Acute,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
xlsx::write.xlsx(wt, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "8mer_Chronic_vs_Acute_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)


panel_d <- mismatch_data_meta %>%
  #filter(grepl("Virus", Taxonomic.lineage)) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  filter(Chronic.or.Acute %in% c("Acute", "Chronic") | grepl("Bacteria", Taxonomic.lineage)) %>%
  mutate(Chronic.or.Acute = ifelse(grepl("Bacteria", Taxonomic.lineage), "Bacteria", Chronic.or.Acute)) %>%
  group_by(`Chronic.or.Acute`, name) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  dplyr::summarize(mean_value = mean(value), count = n(), sd = sd(value)) %>%
  mutate(value_stderr = sd/sqrt(count)) %>%
  mutate(name = gsub("_corrected", "", name)) %>%
  mutate(name =ifelse(name != "0",  paste0("≤", name), name)) %>%
  mutate(name = factor(name, c("0", "≤1", "≤2", "≤3"))) %>%
  ggplot(aes(x=name, y=mean_value, color = `Chronic.or.Acute`)) +
    geom_point() +
    geom_line(aes(group = `Chronic.or.Acute`)) +
    scale_y_continuous(trans = log10_trans(),
     breaks = trans_breaks("log10", function(x) round(10^x, 3))) +
    theme_classic() +
    geom_errorbar(aes(ymin=mean_value-value_stderr, ymax=mean_value+value_stderr, position=name), width=.1)+
    xlab("Number of mismatches") +
  scale_color_manual(values =c("#1975EE", "#E78305", "black")) +
  ylab("Percent of 8mers (%)") +
  annotation_logticks(sides = "l", size = 0.1) +
  annotate("text", x= c(1,2,3,4), y= c(0.15, 40, 40, 40),
           label = wt$p.adj.star, size = 4, lineheight = 0.5) +
  theme(legend.position = "none")
panel_d
```

## Panel E

```{r, panel_d, fig.width = 4, fig.height = 2.5}
#| warning: false
mismatch_data <- t(out_final)
colnames(mismatch_data) <- mismatch_data[1,]
mismatch_data <- as.data.frame(mismatch_data[-1,])
mismatch_data$ID <- gsub(".*UP", "UP", rownames(mismatch_data))

mismatch_data_meta <- mismatch_data %>%
  inner_join(metadata, by = c("ID" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 ID, Taxon.mnemonic))%>%
  mutate_at(c("0", "1", "2", "3"), as.numeric) %>%
  rowwise() %>%
  mutate(`3` = sum(`0`, `1`, `2`, `3`,na.rm = T),
         `2` = sum(`0`, `1`, `2`,na.rm = T),
         `1` = sum(`0`, `1`,na.rm = T)) %>%
  ungroup()
mismatch_data_meta$`0`[is.na(mismatch_data_meta$`0`)] <- 0
mismatch_data_meta$`1`[is.na(mismatch_data_meta$`1`)] <- 0
mismatch_data_meta$`2`[is.na(mismatch_data_meta$`2`)] <- 0
mismatch_data_meta$`3`[is.na(mismatch_data_meta$`3`)] <- 0

mismatch_data_meta$`0_corrected` <- as.numeric(mismatch_data_meta$`0`) / (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`1_corrected` <- as.numeric(mismatch_data_meta$`1`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`2_corrected` <- as.numeric(mismatch_data_meta$`2`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`3_corrected` <- as.numeric(mismatch_data_meta$`3`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((8-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100

testing_data <- mismatch_data_meta %>%
  filter(!is.na(Family_Viral_Zone)) %>%
  mutate(Family = Family_Viral_Zone) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  mutate(Herpesviridae = ifelse(Family == "Herpesviridae", "Herpesviridae", "Non-Herpesviridae")) %>%
  mutate(Poxviridae = ifelse(Family == "Poxviridae", "Poxviridae", "Non-Poxviridae"))

## These results are used to manually add stars to the graph below in illustrator
kt <- compare_means(data = testing_data, formula = value ~ Family,
              group.by = c("name"), method = "kruskal.test")
wt.p <- compare_means(data = testing_data, formula = value ~ Poxviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
wt.h <- compare_means(data = testing_data, formula = value ~ Herpesviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
wt.hp <- compare_means(data = testing_data %>% filter(Family %in% c("Herpesviridae", "Poxviridae")), formula = value ~ Poxviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA)))) %>%
  mutate(group1 = "Herpesviridae")
xlsx::write.xlsx(kt, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "8mer_Viral_Family_Kruskal", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.p, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "8mer_Pox_vs_Others_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.h, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "8mer_Herpes_vs_Others_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.hp, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "8mer_Herpes_vs_Pox_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)

panel_e <- mismatch_data_meta %>%
  #mutate(Family = ifelse(grepl("Bacteria", Taxonomic.lineage), "Bacteria", Family_Viral_Zone)) %>%
  filter(!is.na(Family_Viral_Zone)) %>%
  mutate(Family = Family_Viral_Zone) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  group_by(Family, name) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  dplyr::summarize(mean_value = mean(value), count = n(), sd = sd(value)) %>%
  filter(count > 4) %>%
  mutate(value_stderr = sd/sqrt(count)) %>%
  mutate(name = gsub("_corrected", "", name)) %>%
  mutate(name =ifelse(name != "0",  paste0("≤", name), name)) %>%
  mutate(name = factor(name, c("0", "≤1", "≤2", "≤3"))) %>%
  ggplot(aes(x=name, y=mean_value, color = `Family`)) +
    geom_point() +
    geom_line(aes(group = `Family`)) +
    scale_y_continuous(trans = log10_trans(),
     breaks = trans_breaks("log10", function(x) round(10^x, 3))) +
    theme_classic() +
    geom_errorbar(aes(ymin=mean_value-value_stderr, ymax=mean_value+value_stderr, position=name), width=.1)+
    xlab("Number of mismatches") +
  scale_color_manual(values =Family_palette_v2) +
  ylab("Percent of 8mers (%)") +
  annotation_logticks(sides = "l", size = 0.1)  +
  annotate("text", x= c(0.9,2,3,3.9), y= c(2, 13, 13, 13),
           label = wt.h$p.adj.star, size = 4, lineheight = 0.5,
           color = Family_palette_v2["Herpesviridae"]) +
  annotate("text", x= c(1.1,2,3,4.1), y= c(2, 13, 13, 13),
           label = wt.p$p.adj.star, size = 4, lineheight = 0.5,
           color = Family_palette_v2["Poxviridae"])  +
  theme(legend.position = "none")
panel_e
```

## Panel F

```{r, panel_e}
#| warning: false
#out_final <- read.csv("../../Key_Data/12mer_proteome_everything.csv", row.names =1)
out_final <- read.csv("../../Key_Data/12mer_proteome_everything_elmfilter_regex.csv", row.names =1)

mismatch_data <- t(out_final)
colnames(mismatch_data) <- mismatch_data[1,]
mismatch_data <- as.data.frame(mismatch_data[-1,])
mismatch_data$ID <- gsub(".*UP", "UP", rownames(mismatch_data))

mismatch_data_meta <- mismatch_data %>%
  inner_join(metadata, by = c("ID" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 ID, Taxon.mnemonic))%>%
  mutate_at(c("0", "1", "2", "3"), as.numeric) %>%
  rowwise() %>%
  mutate(`3` = sum(`0`, `1`, `2`, `3`,na.rm = T),
         `2` = sum(`0`, `1`, `2`,na.rm = T),
         `1` = sum(`0`, `1`,na.rm = T)) %>%
  ungroup()
mismatch_data_meta$`0`[is.na(mismatch_data_meta$`0`)] <- 0
mismatch_data_meta$`1`[is.na(mismatch_data_meta$`1`)] <- 0
mismatch_data_meta$`2`[is.na(mismatch_data_meta$`2`)] <- 0
mismatch_data_meta$`3`[is.na(mismatch_data_meta$`3`)] <- 0

mismatch_data_meta$`0_corrected` <- as.numeric(mismatch_data_meta$`0`) / (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`1_corrected` <- as.numeric(mismatch_data_meta$`1`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`2_corrected` <- as.numeric(mismatch_data_meta$`2`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`3_corrected` <- as.numeric(mismatch_data_meta$`3`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100

xlsx::write.xlsx(mismatch_data_meta, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "12mers", col.names = TRUE, row.names = TRUE, append = TRUE)

testing_data <- mismatch_data_meta %>%
  filter(grepl("Virus", Taxonomic.lineage)) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  filter(Chronic.or.Acute %in% c("Acute", "Chronic"))

wt <- compare_means(data = testing_data, formula = value ~ Chronic.or.Acute,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
xlsx::write.xlsx(wt, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "12mer_Chronic_vs_Acute_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)


panel_f <- mismatch_data_meta %>%
  #filter(grepl("Virus", Taxonomic.lineage)) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  filter(Chronic.or.Acute %in% c("Acute", "Chronic") | grepl("Bacteria", Taxonomic.lineage)) %>%
  mutate(Chronic.or.Acute = ifelse(grepl("Bacteria", Taxonomic.lineage), "Bacteria", Chronic.or.Acute)) %>%
  group_by(`Chronic.or.Acute`, name) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  dplyr::summarize(mean_value = mean(value), count = n(), sd = sd(value)) %>%
  mutate(value_stderr = sd/sqrt(count)) %>%
  mutate(name = gsub("_corrected", "", name)) %>%
  mutate(name =ifelse(name != "0",  paste0("≤", name), name)) %>%
  mutate(name = factor(name, c("0", "≤1", "≤2", "≤3"))) %>%
  ggplot(aes(x=name, y=mean_value, color = `Chronic.or.Acute`)) +
    geom_point() +
    geom_line(aes(group = `Chronic.or.Acute`)) +
    scale_y_continuous(trans = log10_trans(),
     breaks = trans_breaks("log10", function(x) round(10^x, 3))) +
    theme_classic() +
    geom_errorbar(aes(ymin=mean_value-value_stderr, ymax=mean_value+value_stderr, position=name), width=.1)+
    xlab("Number of mismatches") +
  scale_color_manual(values =c("#1975EE", "#E78305", "black")) +
  ylab("Percent of 12mers (%)") +
  annotation_logticks(sides = "l", size = 0.1) +
  annotate("text", x= c(1,2,3,4), y= c(0.07, 0.210, 1, 3),
           label = wt$p.adj.star, size = 4, lineheight = 0.5)+
  theme(legend.key.height= unit(0.4, 'cm'),
        legend.key.width= unit(0.4, 'cm'),
        legend.position = "none")
panel_f
```

## Panel G

```{r, panel_f, fig.width = 4, fig.height = 2.5}
#| warning: false
mismatch_data <- t(out_final)
colnames(mismatch_data) <- mismatch_data[1,]
mismatch_data <- as.data.frame(mismatch_data[-1,])
mismatch_data$ID <- gsub(".*UP", "UP", rownames(mismatch_data))

mismatch_data_meta <- mismatch_data %>%
  inner_join(metadata, by = c("ID" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 ID, Taxon.mnemonic))%>%
  mutate_at(c("0", "1", "2", "3"), as.numeric) %>%
  rowwise() %>%
  mutate(`3` = sum(`0`, `1`, `2`, `3`,na.rm = T),
         `2` = sum(`0`, `1`, `2`,na.rm = T),
         `1` = sum(`0`, `1`,na.rm = T)) %>%
  ungroup()
mismatch_data_meta$`0`[is.na(mismatch_data_meta$`0`)] <- 0
mismatch_data_meta$`1`[is.na(mismatch_data_meta$`1`)] <- 0
mismatch_data_meta$`2`[is.na(mismatch_data_meta$`2`)] <- 0
mismatch_data_meta$`3`[is.na(mismatch_data_meta$`3`)] <- 0

mismatch_data_meta$`0_corrected` <- as.numeric(mismatch_data_meta$`0`) / (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`1_corrected` <- as.numeric(mismatch_data_meta$`1`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`2_corrected` <- as.numeric(mismatch_data_meta$`2`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`3_corrected` <- as.numeric(mismatch_data_meta$`3`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((12-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100

testing_data <- mismatch_data_meta %>%
  filter(!is.na(Family_Viral_Zone)) %>%
  mutate(Family = Family_Viral_Zone) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  mutate(Herpesviridae = ifelse(Family == "Herpesviridae", "Herpesviridae", "Non-Herpesviridae")) %>%
  mutate(Poxviridae = ifelse(Family == "Poxviridae", "Poxviridae", "Non-Poxviridae"))

## These results are used to manually add stars to the graph below in illustrator
kt <- compare_means(data = testing_data, formula = value ~ Family,
              group.by = c("name"), method = "kruskal.test")
wt.p <- compare_means(data = testing_data, formula = value ~ Poxviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
wt.h <- compare_means(data = testing_data, formula = value ~ Herpesviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
wt.hp <- compare_means(data = testing_data %>% filter(Family %in% c("Herpesviridae", "Poxviridae")), formula = value ~ Poxviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA)))) %>%
  mutate(group1 = "Herpesviridae")
xlsx::write.xlsx(kt, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "12mer_Viral_Family_Kruskal", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.p, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "12mer_Pox_vs_Others_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.h, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "12mer_Herpes_vs_Others_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.hp, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "12mer_Herpes_vs_Pox_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)

panel_g <- mismatch_data_meta %>%
  #mutate(Family = ifelse(grepl("Bacteria", Taxonomic.lineage), "Bacteria", Family_Viral_Zone)) %>%
  filter(!is.na(Family_Viral_Zone)) %>%
  mutate(Family = Family_Viral_Zone) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  group_by(Family, name) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  dplyr::summarize(mean_value = mean(value), count = n(), sd = sd(value)) %>%
  filter(Family %in% names(Family_palette_v2)) %>%
  mutate(value_stderr = sd/sqrt(count)) %>%
  mutate(name = gsub("_corrected", "", name)) %>%
  mutate(name =ifelse(name != "0",  paste0("≤", name), name)) %>%
  mutate(name = factor(name, c("0", "≤1", "≤2", "≤3"))) %>%
  mutate(mean_value = ifelse(mean_value == 0, 1E-3, mean_value)) %>%
  ggplot(aes(x=name, y=mean_value, color = `Family`)) +
    geom_point() +
    geom_line(aes(group = `Family`)) +
    theme_classic() +
    geom_errorbar(aes(ymin=mean_value-value_stderr, ymax=mean_value+value_stderr, position=name), width=.1)+
    xlab("Number of mismatches") +
  scale_color_manual(values =Family_palette_v2) +
  ylab("Percent of 12mers (%)") +
  annotation_logticks(sides = "l", size = 0.1)  +
  annotate("text", x= c(0.9,1.9,2.9,3.9), y= c(0.45, 0.75, 1.7, 13),
           label = wt.h$p.adj.star, size = 4, lineheight = 0.5,
           color = Family_palette_v2["Herpesviridae"]) +
  annotate("text", x= c(1.1,2.1,3.1,4.1), y= c(0.45, 0.75, 1.7, 13),
           label = wt.p$p.adj.star, size = 4, lineheight = 0.5,
           color = Family_palette_v2["Poxviridae"]) +
  theme(legend.key.height= unit(0.4, 'cm'),
        legend.key.width= unit(0.4, 'cm')) +
  theme(legend.position = "none") +
  coord_cartesian(ylim = c(1e-3, 10)) +
  scale_y_continuous(trans = log10_trans(),
     breaks = trans_breaks("log10", function(x) round(10^x, 3)))
panel_g
```

## Panel H

```{r, panel_g}
#| warning: false
out_final_18mer <- read.csv("../../Key_Data/18mer_proteome_everything_elmfilter_regex.csv", row.names =1)

mismatch_data <- t(out_final_18mer)
colnames(mismatch_data) <- mismatch_data[1,]
mismatch_data <- as.data.frame(mismatch_data[-1,])
mismatch_data$ID <- gsub(".*UP", "UP", rownames(mismatch_data))

mismatch_data_meta <- mismatch_data %>%
  inner_join(metadata, by = c("ID" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 ID, Taxon.mnemonic))%>%
  mutate_at(c("0", "1", "2", "3"), as.numeric) %>%
  rowwise() %>%
  mutate(`3` = sum(`0`, `1`, `2`, `3`,na.rm = T),
         `2` = sum(`0`, `1`, `2`,na.rm = T),
         `1` = sum(`0`, `1`,na.rm = T)) %>%
  ungroup()
mismatch_data_meta$`0`[is.na(mismatch_data_meta$`0`)] <- 0
mismatch_data_meta$`1`[is.na(mismatch_data_meta$`1`)] <- 0
mismatch_data_meta$`2`[is.na(mismatch_data_meta$`2`)] <- 0
mismatch_data_meta$`3`[is.na(mismatch_data_meta$`3`)] <- 0

mismatch_data_meta$`0_corrected` <- as.numeric(mismatch_data_meta$`0`) / (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`1_corrected` <- as.numeric(mismatch_data_meta$`1`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`2_corrected` <- as.numeric(mismatch_data_meta$`2`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`3_corrected` <- as.numeric(mismatch_data_meta$`3`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100


xlsx::write.xlsx(mismatch_data_meta, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "18mers", col.names = TRUE, row.names = TRUE, append = TRUE)

testing_data <- mismatch_data_meta %>%
  filter(grepl("Virus", Taxonomic.lineage)) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  filter(Chronic.or.Acute %in% c("Acute", "Chronic"))

wt <- compare_means(data = testing_data, formula = value ~ Chronic.or.Acute,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
xlsx::write.xlsx(wt, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "18mer_Chronic_vs_Acute_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)

panel_h <- mismatch_data_meta %>%
  filter(grepl("Virus", Taxonomic.lineage)) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  filter(Chronic.or.Acute %in% c("Acute", "Chronic")) %>%
  group_by(`Chronic.or.Acute`, name) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  dplyr::summarize(mean_value = mean(value), count = n(), sd = sd(value)) %>%
  mutate(value_stderr = sd/sqrt(count)) %>%
  mutate(name = gsub("_corrected", "", name)) %>%
  mutate(name =ifelse(name != "0",  paste0("≤", name), name)) %>%
  mutate(name = factor(name, c("0", "≤1", "≤2", "≤3"))) %>%
  ggplot(aes(x=name, y=mean_value, color = `Chronic.or.Acute`)) +
    geom_point() +
    geom_line(aes(group = `Chronic.or.Acute`)) +
    #scale_y_continuous(trans = log2_trans(),
    # breaks = trans_breaks("log2", function(x) round(2^x, 3))) +
    theme_classic() +
    geom_errorbar(aes(ymin=mean_value-value_stderr, ymax=mean_value+value_stderr, position=name), width=.1)+
    xlab("Number of mismatches") +
  scale_color_manual(values =c("#1975EE", "#E78305")) +
  ylab("Percent of 18mers (%)") +
  annotate("text", x= c(1,2,3,4), y= c(0.02, 0.05, 0.085, 0.06),
           label = wt$p.adj.star, size = 4, lineheight = 0.5) +
  theme(legend.position = "none")
panel_h
```

## Panel I

```{r, panel_h}
#| warning: false
mismatch_data <- t(out_final_18mer)
colnames(mismatch_data) <- mismatch_data[1,]
mismatch_data <- as.data.frame(mismatch_data[-1,])
mismatch_data$ID <- gsub(".*UP", "UP", rownames(mismatch_data))

mismatch_data_meta <- mismatch_data %>%
  inner_join(metadata, by = c("ID" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 ID, Taxon.mnemonic))%>%
  mutate_at(c("0", "1", "2", "3"), as.numeric) %>%
  rowwise() %>%
  mutate(`3` = sum(`0`, `1`, `2`, `3`,na.rm = T),
         `2` = sum(`0`, `1`, `2`,na.rm = T),
         `1` = sum(`0`, `1`,na.rm = T)) %>%
  ungroup()
mismatch_data_meta$`0`[is.na(mismatch_data_meta$`0`)] <- 0
mismatch_data_meta$`1`[is.na(mismatch_data_meta$`1`)] <- 0
mismatch_data_meta$`2`[is.na(mismatch_data_meta$`2`)] <- 0
mismatch_data_meta$`3`[is.na(mismatch_data_meta$`3`)] <- 0

mismatch_data_meta$`0_corrected` <- as.numeric(mismatch_data_meta$`0`) / (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`1_corrected` <- as.numeric(mismatch_data_meta$`1`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`2_corrected` <- as.numeric(mismatch_data_meta$`2`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100
mismatch_data_meta$`3_corrected` <- as.numeric(mismatch_data_meta$`3`) /  (as.numeric(mismatch_data_meta$`Proteome Length`) -((18-1)*as.numeric(mismatch_data_meta$`Number of Proteins`)))*100

testing_data <- mismatch_data_meta %>%
  filter(!is.na(Family_Viral_Zone)) %>%
  mutate(Family = Family_Viral_Zone) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  mutate(Herpesviridae = ifelse(Family == "Herpesviridae", "Herpesviridae", "Non-Herpesviridae")) %>%
  mutate(Poxviridae = ifelse(Family == "Poxviridae", "Poxviridae", "Non-Poxviridae"))

## These results are used to manually add stars to the graph below in illustrator
kt <- compare_means(data = testing_data, formula = value ~ Family,
              group.by = c("name"), method = "kruskal.test")
wt.p <- compare_means(data = testing_data, formula = value ~ Poxviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
wt.h <- compare_means(data = testing_data, formula = value ~ Herpesviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA))))
wt.hp <- compare_means(data = testing_data %>% filter(Family %in% c("Herpesviridae", "Poxviridae")), formula = value ~ Poxviridae,
              group.by = c("name"), method = "wilcox.test") %>%
  mutate(p.adj.star = ifelse(p.adj <= 0.001, "*\n*\n*", ifelse(p.adj <= 0.01, "*\n*",
                                                        ifelse(p.adj<=0.05, "*", NA)))) %>%
  mutate(group1 = "Herpesviridae")

xlsx::write.xlsx(kt, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "18mer_Viral_Family_Kruskal", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.p, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "18mer_Pox_vs_Others_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.h, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "18mer_Herpes_vs_Others_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
xlsx::write.xlsx(wt.hp, paste0(out_dir, "FigureS1_data.xlsx"), sheetName = "18mer_Herpes_vs_Pox_Wilcox", col.names = TRUE, row.names = TRUE, append = TRUE)
panel_i <- mismatch_data_meta %>%
  #mutate(Family = ifelse(grepl("Bacteria", Taxonomic.lineage), "Bacteria", Family_Viral_Zone)) %>%
  filter(!is.na(Family_Viral_Zone)) %>%
  mutate(Family = Family_Viral_Zone) %>%
  pivot_longer(cols=paste0(c(0,1,2,3), ("_corrected"))) %>%
  group_by(Family, name) %>%
  mutate(value = ifelse(is.na(value), 0, value)) %>%
  dplyr::summarize(mean_value = mean(value), count = n(), sd = sd(value)) %>%
  #filter(count > 4) %>%
  mutate(value_stderr = sd/sqrt(count)) %>%
  mutate(name = gsub("_corrected", "", name)) %>%
  mutate(name =ifelse(name != "0",  paste0("≤", name), name)) %>%
  mutate(name = factor(name, c("0", "≤1", "≤2", "≤3"))) %>%
  ## Only keep Families that have at least one non-zero point
  filter(Family %in% c("Poxviridae", "Herpesviridae", "Coronaviridae")) %>% 
  ggplot(aes(x=name, y=mean_value, color = `Family`)) +
    geom_point() +
    geom_line(aes(group = `Family`)) +
    theme_classic() +
    geom_errorbar(aes(ymin=mean_value-value_stderr, ymax=mean_value+value_stderr, position=name), width=.1)+
    xlab("Number of mismatches") +
  scale_color_manual(values =Family_palette_v2) +
  ylab("Percent of 18mers (%)") +
  annotate("text", x= c(0.9,1.9,2.9,3.9), y= c(0.03, 0.05, 0.075, 0.1),
           label = wt.h$p.adj.star, size = 4, lineheight = 0.5,
           color = Family_palette_v2["Herpesviridae"]) +
  annotate("text", x= c(1.1,2.1,3.1,4.1), y= c(0.03, 0.05, 0.075, 0.1),
           label = wt.p$p.adj.star, size = 4, lineheight = 0.5,
           color = Family_palette_v2["Poxviridae"]) +
  # geom_errorbar(inherit.aes = FALSE, aes(x=0.85, ymin = 0.018380776, ymax = 0.075685311), color = "#545252",
  #               size = 0.3, width = 0.1) +
  # geom_errorbar(inherit.aes = FALSE, aes(x=1.85, ymin = 0.051403280, ymax = 0.182375884), color = "#545252",
  #               size = 0.3, width = 0.1) +
  # geom_errorbar(inherit.aes = FALSE, aes(x=2.85, ymin = 0.085500719, ymax = 0.345138406), color = "#545252",
  #               size = 0.3, width = 0.1) +
  # geom_errorbar(inherit.aes = FALSE, aes(x=3.85, ymin = 0.145041702, ymax = 0.536979034), color = "#545252",
  #               size = 0.3, width = 0.1) +
  # annotate("text", x= c(0.75, 1.8, 2.8, 3.8), y= c(0.04557349, 0.1136466,
  #                                                  0.2057032, 0.3237431),
  #          label = wt.hp$p.adj.star, size = 4, lineheight = 0.5,
  #          color = "#545252") +
  theme(legend.position = "none")
panel_i
```

## Panel Assembly

```{r, panel_c_f_assembly_save, fig.width=5, fig.height=9}
#| warning: false
panel_d_i <- ggarrange(panel_d, panel_e,panel_f, panel_g,panel_h, panel_i, nrow = 3, ncol = 2, widths = c(1,1), align = "hv",
                       labels = c("D", "E", "F", "G", "H", "I"),
                       label.x = 0.1)
panel_d_i
ggsave(paste0(out_dir, "Figure1S_D-I.pdf"), height = 7, width = 4)
```

---
title: "Figure5_vSubFinal"
format: html
editor: visual
---

# Figure 5

## Bootup

```{r setup}
library(seqinr)
library(stringi)
library(clusterProfiler)
library(R.utils)
library(tidyverse)
library(data.table)
library(readxl)
library(ReactomePA)
library(biomaRt)
library(reticulate)
library(treeio)
library(ggtree)
library(ade4)
library(aplot)
library(xlsx)
library(scales)
out_dir <- "../output/"
source("../../Utilities.R")

mart <- useEnsembl("ensembl", dataset = "hsapiens_gene_ensembl") ## , mirror = "useast"
mart_retrieved <- getBM(
  mart = mart,
  attributes = c(
    'ensembl_gene_id',
    'entrezgene_id',
    'external_gene_name',
    'uniprot_gn_symbol',
    'uniprot_gn_id',
    'chromosome_name',
    'description'),
  uniqueRows=TRUE)

meta_path <- "../../Metadata/"
metadata <- openxlsx::read.xlsx(paste0(meta_path, "Final_Cohort_Metadata_v5.xlsx"), sheet = 1)

duplicated_proteins <- read_csv(paste0(meta_path, "duplicated_proteins.csv"))
human_duplicated_proteins <- read_csv(paste0(meta_path, "human_duplicated_or_removed_proteins.csv")) %>%
  dplyr::rename("uniprot" = 1)

tissue_map <- read_tsv(paste0(meta_path, "normal_tissue.tsv"))
organ_map <- read_excel(paste0(meta_path, "Tissue_Groupings.xlsx"))
tissue_organ_map <- merge(tissue_map, organ_map, by.x = "Tissue", by.y = "Var1", all.x = T)
unique(tissue_organ_map$Level)
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "Not detected",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "Not representative",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Level != "N/A",]

unique(tissue_organ_map$Reliability)
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Reliability != "Uncertain",]
tissue_organ_map <- tissue_organ_map[tissue_organ_map$Reliability != "NA",]

tissue_organ_map_condensed <- tissue_organ_map %>%
  dplyr::select(Tissue, Gene, `Cell type`, `New Name`) %>%
  group_by(Gene) %>%
  dplyr::summarize(organ_system = gsub("NA;", "", paste(unique(`New Name`), collapse = ";")),
                   tissue = gsub("NA;", "", paste(unique(Tissue), collapse = ";")),
                   cell_type = gsub("NA;", "", paste(unique(`Cell type`), collapse = ";")))

protein_atlas <- read_tsv("../../Databases/proteinatlas_2023-10-15.tsv")
```

## Panel B

```{r}

ebv_mimicry <- fread("../../12mer_annotated/Epstein-Barr_virus_UP000153037_12mer_3mis_hits.csv.gz")
latent_ebv_proteins <- c("P03211", "P03230", "P12978", "P13285", "Q8AZK7",
                         "P03204", "P12977", "P03203")
ebv_fasta <- seqinr::read.fasta("../../../epitope_alignment/Viral_Proteomes/Final_Cohort/Epstein-Barr_virus_UP000153037.fasta.gz", seqtype = "AA", as.string = TRUE, set.attributes = FALSE, whole.header = TRUE)

EBV_latency <- protein_compare(virus_name = "EBV",
                mimicry_df = ebv_mimicry,
                fasta = ebv_fasta,
                protein_ids = latent_ebv_proteins,
                kmer_length = 12,
                star_heights = c(3,10,15,25),
                feature_name = c("Latent", "Lytic"))
EBV_latency[[1]]
ggsave(paste0(out_dir, "Figure5B.pdf"), width = 4.5, height = 3)

write.xlsx(EBV_latency[[2]], paste0(out_dir, "TableS5.xlsx"), sheetName = "EBV_Latent_vs_Lytic", col.names = TRUE, row.names = TRUE, append = FALSE)
```

## mTEC Expression Test

### Gabrielsen I et al 2019 gene expression

```{r}

all_genes <- read_xlsx("../../Databases/Gabrielsen_I_et_al_2019_TableS3.xlsx",
                       skip = 2) %>%
  dplyr::rename("ensembl_gene_id"=1) %>%
  dplyr::distinct(ensembl_gene_id, mTEC.MED, CD123.MED, CD141.MED, CD19.MED) %>%
  rowwise() %>%
  mutate(Any.MED = ifelse(sum(c(mTEC.MED, CD123.MED, CD141.MED, CD19.MED)) > 0,
                          1, 0))

## gabrielsen_gene_set_binary
gabrielsen_gene_set_binary_both <- all_genes %>%
  pivot_longer(-ensembl_gene_id) %>%
  arrange(ensembl_gene_id, name) %>%
  mutate(name = paste0(name,value)) %>%
  dplyr::distinct(name, ensembl_gene_id) %>%
  left_join(mart_retrieved %>% distinct(ensembl_gene_id, uniprot_gn_id)) %>%
  filter(!uniprot_gn_id %in% c(" ", "", NA)) %>%
  distinct(uniprot_gn_id, name) %>%
  dplyr::rename(uniprot = 1)

## The known frequencies of proteins
protein_frequencies <- gabrielsen_gene_set_binary_both %>%
  group_by(name) %>%
  dplyr::summarize(count = n()) %>%
  mutate(cell_type = gsub(".MED.*", "", name),
         found = gsub(".*MED", "", name)) %>%
  dplyr::select(-name) %>%
  pivot_wider(names_from = found, values_from = count) %>%
  mutate(freq = `1`/(`1` +`0`))

```

<!-- ## Hypergeometric testing of mTEC (version 2) -->

<!-- ```{r} -->

<!-- setwd("../../12mer_annotated/") -->

<!-- files_to_read <- list.files() -->

<!-- files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)] -->

<!-- files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)] -->

<!-- all_genes_enrichment <- unique(all_genes$ensembl_gene_id) -->

<!-- out_final <- list() -->

<!-- for(active_file in files_to_read){ -->

<!--   print(paste0("Starting ", active_file)) -->

<!--   active_data <- fread(active_file, nThread = 10) %>% -->

<!--     as.data.frame() %>% -->

<!--     filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>% -->

<!--     filter(!uniprot %in% human_duplicated_proteins$uniprot) -->

<!--   if(nrow(active_data) == 0){ -->

<!--     next -->

<!--   } -->

<!--   genes.tmp <- unique(active_data$ensembl_gene_id)[!is.na(unique(active_data$ensembl_gene_id))] -->

<!--   genes.tmp <- genes.tmp[!genes.tmp%in%c("", " ")] -->

<!--   mTEC_enrichment <- enricher(gene = genes.tmp, -->

<!--            TERM2GENE = gabrielsen_gene_set, -->

<!--            universe = all_genes_enrichment, -->

<!--            pAdjustMethod = "fdr",maxGSSize = Inf -->

<!--             ) -->

<!--   mTEC_enrichment_binary <- enricher(gene = genes.tmp, -->

<!--            TERM2GENE = gabrielsen_gene_set_binary, -->

<!--            universe = all_genes_enrichment, -->

<!--            pAdjustMethod = "fdr",maxGSSize = Inf -->

<!--             ) -->

<!--   if(is.null(mTEC_enrichment)){ -->

<!--     next -->

<!--   } -->

<!--   out_final <- c(out_final, list(rbind.data.frame(mTEC_enrichment@result, mTEC_enrichment_binary@result))) -->

<!--   names(out_final)[length(out_final)] <- gsub(".*_UP", "UP", gsub("_12mer.*", "", active_file)) -->

<!-- } -->

<!-- saveRDS(out_final, "../Figure5/output/mTEC_results_2023-10-28.rds") -->

<!-- ``` -->

<!-- ```{r} -->

<!-- df_out3 <- data.frame() -->

<!-- for(i in 1:length(out_final)){ -->

<!--   active_data <- out_final[[i]]#@result -->

<!--   if(nrow(active_data) == 1 & is.na(active_data$Description[1])){ -->

<!--     next -->

<!--   } -->

<!--   active_data$virus <- names(out_final)[i] -->

<!--   df_out3 <- rbind.data.frame(df_out3, active_data) -->

<!-- } -->

<!-- df_out3 <- df_out3 %>% -->

<!--   rowwise() %>% -->

<!--   mutate(freq = eval(parse(text=GeneRatio)) * 100) %>% -->

<!-- write.csv(df_out3, "../output/mTEC_results_2024-02-29.csv") -->

<!-- df_out3 <- read.csv("../output/mTEC_results_2024-02-29.csv") -->

<!-- plot.data <- df_out3 %>% -->

<!--   mutate(p.adjust.manual = p.adjust(pvalue, "fdr")) %>% -->

<!--   mutate(virus = gsub("_", " ", virus)) %>% -->

<!--   filter(p.adjust <= 0.05) %>% -->

<!--   mutate(log10.p.adjust = -log10(p.adjust)) #%>% -->

<!-- gg2 <- plot.data %>% -->

<!--   left_join(metadata, by=c("virus" = "Proteome.ID")) %>% -->

<!--   ggplot(aes(x=Description, y=Taxon.mnemonic, size = log10.p.adjust, col = log10.p.adjust)) + -->

<!--   geom_point() + -->

<!--   theme_classic() + -->

<!--   guides(size=guide_legend("-log10 Transformed\nAdjusted p-values"), -->

<!--          color=guide_legend("-log10 Transformed\nAdjusted p-values")) + -->

<!--   scale_color_gradientn(colors=c("dodgerblue", "#bf5700")) + -->

<!--   scale_x_discrete(limits=rev) + -->

<!--   theme(panel.grid.major = element_line(color="grey", size=0.1),  -->

<!--         axis.text.x = element_text(angle=90, hjust=1, vjust = 0.5,)) -->

<!-- gg2 -->

<!-- ``` -->

### Fisher test against permuted

### Base Counts

```{r}


setwd("../../12mer_annotated/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".csv.gz", files_to_read)]
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

all_genes_enrichment <- unique(all_genes$ensembl_gene_id)
 
out_final <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file))
  active_data <- fread(active_file, nThread = 10) %>%
    as.data.frame() %>%
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot) %>%
    filter(mismatches <= 2)
  if(nrow(active_data) == 0){
    zero_df <- data.frame(cell_type = c("CD123", "CD141", "CD19", "mTEC"),
                    `0` = rep(0, 4),
                    `1` = rep(0, 4),
                    virus = rep(gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)), 4))
    colnames(zero_df)[2:3] <- c("0", "1")
     out_final <- plyr::rbind.fill(out_final, zero_df)
     next
  }
  counts_df <- active_data %>%
    filter(!uniprot %in% c(NA, "", " ")) %>%
    left_join(gabrielsen_gene_set_binary_both) %>%
    filter(!is.na(name)) %>%
    distinct(query_start, target_start, name, uniprot, viral_id) %>%
    mutate(cell_type = gsub(".MED.*", "", name),
           expressed = gsub(".*MED", "", name)) %>%
    group_by(viral_id, query_start, cell_type) %>%
    slice_max(expressed) %>%
    distinct(viral_id, query_start, cell_type, expressed) %>%
    group_by(cell_type, expressed) %>%
    dplyr::summarize(count = n()) %>%
    pivot_wider(names_from = expressed, values_from = count) %>%
    mutate(virus = gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)))
  out_final <- plyr::rbind.fill(out_final, counts_df)
  
}

write.csv(out_final, paste0("../Figure5/output/", "mTEC_real.csv"))

```

### Permutation 1

```{r}
#| eval: false
setwd("../../../epitope_alignment/Results/Permutation_exp1/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".tsv", files_to_read)]
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

all_genes_enrichment <- unique(all_genes$ensembl_gene_id)
 
out_final_perm1 <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file))
  active_data <- fread(active_file, nThread = 10) 
  
  if(nrow(active_data) == 0){
    zero_df <- data.frame(cell_type = c("CD123", "CD141", "CD19", "mTEC"),
                    `0` = rep(0, 4),
                    `1` = rep(0, 4),
                    virus = rep(gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)), 4))
    colnames(zero_df)[2:3] <- c("0", "1")
     out_final_perm1 <- plyr::rbind.fill(out_final_perm1, zero_df)
     next
  }
  
  active_data[, uniprot := id_split_fast(target_seqname), by = seq_len(nrow(active_data))]
  active_data[, viral_id := id_split_fast(query_seqname), by = seq_len(nrow(active_data))]
  active_data[, mismatches := mismatch_calling_fast(query, target), by = seq_len(nrow(active_data))]
  
  active_data <- active_data%>%
    as.data.frame() %>%
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot) %>%
    filter(mismatches <= 2)
  if(nrow(active_data) == 0){
    zero_df <- data.frame(cell_type = c("CD123", "CD141", "CD19", "mTEC"),
                    `0` = rep(0, 4),
                    `1` = rep(0, 4),
                    virus = rep(gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)), 4))
    colnames(zero_df)[2:3] <- c("0", "1")
    out_final_perm1 <- plyr::rbind.fill(out_final_perm1, zero_df)
    next
  }
 counts_df <- active_data %>%
    filter(!uniprot %in% c(NA, "", " ")) %>%
    left_join(gabrielsen_gene_set_binary_both) %>%
    filter(!is.na(name)) %>%
    distinct(query_start, target_start, name, uniprot, viral_id) %>%
    mutate(cell_type = gsub(".MED.*", "", name),
           expressed = gsub(".*MED", "", name)) %>%
    group_by(viral_id, query_start, cell_type) %>%
    slice_max(expressed) %>%
    distinct(viral_id, query_start, cell_type, expressed) %>%
    group_by(cell_type, expressed) %>%
    dplyr::summarize(count = n()) %>%
    pivot_wider(names_from = expressed, values_from = count) %>%
    mutate(virus = gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)))
  out_final_perm1 <- plyr::rbind.fill(out_final_perm1, counts_df)
}


write.csv(out_final_perm1, paste0("../../../Analysis/Figure5/output/", "mTEC_perm1.csv"))
```

### Permutation 2

```{r}
#| eval: false
setwd("../../../epitope_alignment/Results/Permutation_exp2/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".tsv", files_to_read)]
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

all_genes_enrichment <- unique(all_genes$ensembl_gene_id)
 
out_final_perm2 <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file))
  active_data <- fread(active_file, nThread = 10) 
  
  active_data[, uniprot := id_split_fast(target_seqname), by = seq_len(nrow(active_data))]
  active_data[, viral_id := id_split_fast(query_seqname), by = seq_len(nrow(active_data))]
  active_data[, mismatches := mismatch_calling_fast(query, target), by = seq_len(nrow(active_data))]
  
  active_data <- active_data%>%
    as.data.frame() %>%
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot)%>%
    filter(mismatches <= 2)
  if(nrow(active_data) == 0){
    zero_df <- data.frame(cell_type = c("CD123", "CD141", "CD19", "mTEC"),
                    `0` = rep(0, 4),
                    `1` = rep(0, 4),
                    virus = rep(gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)), 4))
    colnames(zero_df)[2:3] <- c("0", "1")
     out_final_perm2 <- plyr::rbind.fill(out_final_perm2, zero_df)
     next
  }
  counts_df <- active_data %>%
    filter(!uniprot %in% c(NA, "", " ")) %>%
    left_join(gabrielsen_gene_set_binary_both) %>%
    filter(!is.na(name)) %>%
    distinct(query_start, target_start, name, uniprot, viral_id) %>%
    mutate(cell_type = gsub(".MED.*", "", name),
           expressed = gsub(".*MED", "", name)) %>%
    group_by(viral_id, query_start, cell_type) %>%
    slice_max(expressed) %>%
    distinct(viral_id, query_start, cell_type, expressed) %>%
    group_by(cell_type, expressed) %>%
    dplyr::summarize(count = n()) %>%
    pivot_wider(names_from = expressed, values_from = count) %>%
    mutate(virus = gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)))
  out_final_perm2 <- plyr::rbind.fill(out_final_perm2, counts_df)
}


write.csv(out_final_perm2, paste0("../../../Analysis/Figure5/output/", "mTEC_perm2.csv"))


```

### Permutation 3

```{r}
#| eval: false
setwd("../../../epitope_alignment/Results/Permutation_exp3/")
files_to_read <- list.files()
files_to_read <- files_to_read[grepl(".tsv", files_to_read)]
## For testing purposes use this subset
files_to_read <- files_to_read[grepl(paste(metadata$Proteome.ID[metadata$superkingdom == "Viruses"], collapse = "|"), files_to_read)]

all_genes_enrichment <- unique(all_genes$ensembl_gene_id)
 
out_final_perm3 <- data.frame()
for(active_file in files_to_read){
  print(paste0("Starting ", active_file))
  active_data <- fread(active_file, nThread = 10) 
  
   if(nrow(active_data) == 0){
    zero_df <- data.frame(cell_type = c("CD123", "CD141", "CD19", "mTEC"),
                    `0` = rep(0, 4),
                    `1` = rep(0, 4),
                    virus = rep(gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)), 4))
    colnames(zero_df)[2:3] <- c("0", "1")
    out_final_perm1 <- plyr::rbind.fill(out_final_perm1, zero_df)
    next
  }
  
  active_data[, uniprot := id_split_fast(target_seqname), by = seq_len(nrow(active_data))]
  active_data[, viral_id := id_split_fast(query_seqname), by = seq_len(nrow(active_data))]
  active_data[, mismatches := mismatch_calling_fast(query, target), by = seq_len(nrow(active_data))]
  
  active_data <- active_data%>%
    as.data.frame() %>%
    filter(!viral_id %in% duplicated_proteins$viral_uniprot) %>%
    filter(!uniprot %in% human_duplicated_proteins$uniprot)%>%
    filter(mismatches <= 2)
  
   if(nrow(active_data) == 0){
    zero_df <- data.frame(cell_type = c("CD123", "CD141", "CD19", "mTEC"),
                    `0` = rep(0, 4),
                    `1` = rep(0, 4),
                    virus = rep(gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)), 4))
    colnames(zero_df)[2:3] <- c("0", "1")
    out_final_perm1 <- plyr::rbind.fill(out_final_perm1, zero_df)
    next
   }
  
  counts_df <- active_data %>%
    filter(!uniprot %in% c(NA, "", " ")) %>%
    left_join(gabrielsen_gene_set_binary_both) %>%
    filter(!is.na(name)) %>%
    distinct(query_start, target_start, name, uniprot, viral_id) %>%
    mutate(cell_type = gsub(".MED.*", "", name),
           expressed = gsub(".*MED", "", name)) %>%
    group_by(viral_id, query_start, cell_type) %>%
    slice_max(expressed) %>%
    distinct(viral_id, query_start, cell_type, expressed) %>%
    group_by(cell_type, expressed) %>%
    dplyr::summarize(count = n()) %>%
    pivot_wider(names_from = expressed, values_from = count) %>%
    mutate(virus = gsub(".*_UP", "UP", gsub("_12mer_3mis.*", "", active_file)))
  out_final_perm3 <- plyr::rbind.fill(out_final_perm3, counts_df)
}


write.csv(out_final_perm3, paste0("../../../Analysis/Figure5/output/", "mTEC_perm3.csv"))


```

### Chi.Square test of rate vs rate of expression

```{r}

out_final <- read.csv(paste0(out_dir, "mTEC_real.csv"), row.names = 1) %>%
  mutate(virus = gsub("-.*", "", virus)) %>%
  left_join(protein_frequencies) %>%
  mutate(`X0` = ifelse(is.na(`X0`), 0, `X0`),
         `X1` = ifelse(is.na(`X1`), 0, `X1`)) %>%
  mutate(freq.viral = `X1` / (X1 +X0)) %>%
  mutate(p.value = NA)


for(i in 1:nrow(out_final)){
  count_table <- mapply(c,out_final[i, c(2,3)],out_final[i, c(5,6)])
  count_table[is.na(count_table)] <- 0
  tmp <- try(fisher.test(count_table), silent = TRUE)
   if(class(tmp) != "try-error"){
      out_final$p.value[i] <- tmp$p.value
   }
}

graph_data <- out_final %>%
  inner_join(metadata, by = c("virus" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `virus`, Taxon.mnemonic)) %>%
  dplyr::rename("label" = "Taxon.mnemonic") %>%
  mutate(label = factor(label)) %>%
  mutate(FC = freq.viral / freq) %>%
  mutate(p.adj = p.adjust(p.value, "fdr")) %>%
  filter(p.adj <= 0.01) %>%
  mutate(log10p = -log10(p.adj)) %>%
  mutate(direction = ifelse(FC>1, "Up", "Down"))

gg5 <- graph_data %>%
  mutate(difference = freq.viral* 100 - freq * 100) %>%
  ggplot(aes(x=label, y=cell_type)) +
  geom_point(aes(size =log10p, fill = difference), shape =21) +
  theme_light() +
  #scale_fill_manual(values = c("#6999EA", "#EA6983")) +
  scale_fill_gradientn(limits = c(-10,10),
  colours=c("darkblue", "lightgray", "darkred"),
  breaks=c(-10, -5, 0, 5, 10),
  guide = guide_colorbar(frame.colour = "black", ticks.colour = "black"),
  name = "Percent Difference", oob=squish) +
  scale_color_manual(values = c("00FFFFFF", "black")) + 
  scale_x_discrete(drop=FALSE) +
  ylab("Thymus Cell Type") +
  theme(panel.grid.major = element_line(color="grey", size=0.1), 
        axis.text.x = element_text(angle=45, hjust = 0),
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_discrete(position = "top") +
  guides(size=guide_legend("-log10 Transformed\nAdjusted p-values"),
         #fill=guide_legend("Percent Difference"),
         color=guide_legend("Significant in all\nthree permutations"))
gg5
```

```{r}

taxa <- metadata %>% as.data.frame() %>%
  mutate(Taxon.mnemonic = ifelse(is.na(Taxon.mnemonic),
                                 "Simian virus 5", Taxon.mnemonic)) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
  filter(Proteome.ID %in% graph_data$`virus`) %>%
  column_to_rownames("Taxon.mnemonic") %>%
  dplyr::select(family, order, class, phylum, kingdom) %>%
  as.data.frame()
taxa[taxa$family == "Anelloviridae",] <- "Anelloviridae"
taxa[taxa$family == "Kolmioviridae",] <- "Kolmioviridae"

check <- as.data.frame(lapply(taxa, as.factor), stringsAsFactors =TRUE)
rownames(check) <- rownames(taxa)
check <- check[complete.cases(check),]
tmp <- taxo2phylog(as.taxo(check), root="Root", abbrev=F)

tax.phy <- as.phylo(tmp)


gg_tree <- ggtree(tax.phy, branch.length='none')
gg_tree

gg_tree[["data"]] <- gg_tree[["data"]] %>% 
  left_join(metadata %>%
               mutate(Taxon.mnemonic = ifelse(is.na(Taxon.mnemonic),
                                 "Simian virus 5", Taxon.mnemonic)) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
    dplyr::select(Taxon.mnemonic, family), by = c("label" = "Taxon.mnemonic"))

gg_tree <-  gg_tree + geom_hilight(mapping=aes(subset = family %in% names(Family_palette_v2),fill = family), alpha = 0.8) +
   scale_fill_manual(values = Family_palette_v2, name = "Viral Family")


gg5 %>%
  insert_bottom(gg_tree + coord_flip(),height = 0.2)
ggsave(paste0(out_dir, "Figure5C.pdf"), width =15, height = 4)
```

## Panel C

```{r}
out_final <- read.csv(paste0(out_dir, "mTEC_real.csv"), row.names = 1) %>%
  mutate(virus = gsub("-.*", "", virus))

out_final_perm1 <- read.csv(paste0(out_dir, "mTEC_perm1.csv"), row.names = 1) %>%
  mutate(virus = gsub("-.*", "", virus)) %>%
  mutate(`X0` = ifelse(is.na(`X0`), 0, `X0`),
               `X1` = ifelse(is.na(`X1`), 0, `X1`)) %>%
  group_by(virus, cell_type) %>%
  dplyr::summarize(`X0` = round(mean(`X0`, na.rm = TRUE), 0),
                   `X1` = round(mean(`X1`, na.rm = TRUE), 0))
out_final_perm2 <- read.csv(paste0(out_dir, "mTEC_perm2.csv"), row.names = 1) %>%
  mutate(virus = gsub("-.*", "", virus)) 
out_final_perm3 <- read.csv(paste0(out_dir, "mTEC_perm3.csv"), row.names = 1) %>%
  mutate(virus = gsub("-.*", "", virus)) %>%
  mutate(`X0` = ifelse(is.na(`X0`), 0, `X0`),
               `X1` = ifelse(is.na(`X1`), 0, `X1`)) %>%
  group_by(virus, cell_type) %>%
  dplyr::summarize(`X0` = round(mean(`X0`, na.rm = TRUE), 0),
                   `X1` = round(mean(`X1`, na.rm = TRUE), 0))


combined_df <- out_final %>%
  mutate(`X0` = ifelse(is.na(`X0`), 0, `X0`),
         `X1` = ifelse(is.na(`X1`), 0, `X1`)) %>%
  rowwise() %>%
  mutate(ratio = `X1` / (`X1` + `X0`)) %>%
  left_join(out_final_perm1 %>%
                 dplyr::rename("X1.perm1" = "X1",
                 "X0.perm1" = "X0") %>%
              rowwise() %>%
              mutate(ratio_perm1 = `X1.perm1` / (`X1.perm1` + `X0.perm1`))) %>%
  left_join(out_final_perm2 %>%
               mutate(`X0` = ifelse(is.na(`X0`), 0, `X0`),
               `X1` = ifelse(is.na(`X1`), 0, `X1`)) %>%
                dplyr::rename("X1.perm2" = "X1",
                              "X0.perm2" = "X0") %>%
              rowwise() %>%
              mutate(ratio_perm2 = `X1.perm2` / (`X1.perm2` + `X0.perm2`))) %>%
  left_join(out_final_perm3 %>%
                 dplyr::rename("X1.perm3" = "X1",
                 "X0.perm3" = "X0") %>%
              rowwise() %>%
              mutate(ratio_perm3 = `X1.perm3` / (`X1.perm3` + `X0.perm3`))) %>%
  rowwise() %>%
  mutate(FC_perm1 = ratio/(ratio_perm1+0.001),
         FC_perm2 = ratio/(ratio_perm2+0.001),
         FC_perm3 = ratio/(ratio_perm3+0.001)) %>%
  mutate(p.value.perm1 = NA,
         p.value.perm2 = NA,
         p.value.perm3 = NA) %>%
  as.data.frame()

for(i in 1:nrow(combined_df)){
  count_table <- mapply(c,combined_df[i, c(2,3)],combined_df[i, c(6,7)])
  count_table[is.na(count_table)] <- 0
  tmp <- try(fisher.test(count_table), silent = TRUE)
   if(class(tmp) != "try-error"){
      combined_df$p.value.perm1[i] <- tmp$p.value
   }
 
  count_table <- mapply(c,combined_df[i, c(2,3)],combined_df[i, c(9,10)])
  count_table[is.na(count_table)] <- 0
  tmp <- try(fisher.test(count_table), silent = TRUE)
   if(class(tmp) != "try-error"){
      combined_df$p.value.perm2[i] <- tmp$p.value
   }
 
 count_table <- mapply(c,combined_df[i, c(2,3)],combined_df[i, c(12,13)])
  count_table[is.na(count_table)] <- 0
  tmp <- try(fisher.test(count_table), silent = TRUE)
 if(class(tmp) != "try-error"){
      combined_df$p.value.perm3[i] <- tmp$p.value
   }
}

combined_df2 <- combined_df %>%
  mutate(p.value.perm1 = -log10(p.adjust(p.value.perm1, "fdr"))) %>%
  mutate(p.value.perm2 = -log10(p.adjust(p.value.perm2, "fdr"))) %>%
  mutate(p.value.perm3 = -log10(p.adjust(p.value.perm3, "fdr"))) %>%
  rowwise() %>%
  mutate(all_sig = ifelse(p.value.perm1 >= -log10(0.05)&
                            p.value.perm2 >= -log10(0.05)&
                            p.value.perm3 >= -log10(0.05), TRUE, FALSE),
         average = mean(c(p.value.perm1, p.value.perm2, p.value.perm3), na.rm = TRUE),
         average_sig = ifelse(average >= -log10(0.05), TRUE, FALSE)) %>%
  mutate(all_up = (FC_perm1 > 1) & (FC_perm2 > 1) & (FC_perm3 > 1)) %>%
  inner_join(metadata, by = c("virus" = "Proteome.ID")) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `virus`, Taxon.mnemonic)) %>%
  dplyr::rename("label" = "Taxon.mnemonic") %>%
  mutate(label = factor(label)) %>%
  mutate(average = ifelse(!average_sig, NA, average))
combined_df_labeled <- combined_df2[,1:24]
colnames(combined_df_labeled) <- c("proteome_id", "thymic_cell_type", "non_expressed_count",
                                   "expressed_count", "percent", "non_expressed_count.perm1",
                                   "expressed_count.perm1", "ratio.perm1", "non_expressed_count.perm2",
                                   "expressed_count.perm2", "ratio.perm2","non_expressed_count.perm3",
                                   "expressed_count.perm3", "ratio.perm3", "FC.perm1",
                                   "FC.perm2","FC.perm3","neglog10.p.value.perm1",
                                   "neglog10.p.value.perm2", "neglog10.p.value.perm3",
                                   "all_sig", "average", "average_significant",
                                   "real_ratio_higher_than_all_perms")
write.xlsx(combined_df_labeled, paste0(out_dir, "TableS5.xlsx"), sheetName = "Panel_C_Thymic_Cells", col.names = TRUE, row.names = FALSE, append = TRUE)

gg5 <- combined_df2 %>%
  filter(average_sig) %>%
  #filter(all_sig) %>%
  #filter(all_up) %>%
  ggplot(aes(x=label, y=cell_type)) +
  geom_point(aes(size =average, fill = all_up, color = all_sig), shape =21) +
  theme_light() +
  scale_fill_manual(values = c("#6999EA", "#EA6983")) +
  #scale_fill_gradientn(colors=c("dodgerblue", "#bf5700")) +
  scale_color_manual(values = c("00FFFFFF", "black")) + # 
  scale_x_discrete(drop=FALSE) +
  ylab("Thymus Cell Type") +
  theme(panel.grid.major = element_line(color="grey", size=0.1), 
        axis.text.x = element_text(angle=45, hjust = 0),
        panel.border = element_rect(colour = "black", fill=NA, size=1)) +
  scale_x_discrete(position = "top") +
  guides(size=guide_legend("Average -log10 Transformed\nAdjusted p-values"),
         fill=guide_legend("Average -log10 Transformed\nAdjusted p-values"),
         color=guide_legend("Significant in all\nthree permutations"))
gg5

```

```{r}
taxa <- metadata %>% as.data.frame() %>%
  mutate(Taxon.mnemonic = ifelse(is.na(Taxon.mnemonic),
                                 "Simian virus 5", Taxon.mnemonic)) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
  filter(Proteome.ID %in% combined_df2$`virus`[combined_df2$average_sig]) %>%
  column_to_rownames("Taxon.mnemonic") %>%
  dplyr::select(family, order, class, phylum, kingdom) %>%
  as.data.frame()
taxa[taxa$family == "Anelloviridae",] <- "Anelloviridae"
taxa[taxa$family == "Kolmioviridae",] <- "Kolmioviridae"

check <- as.data.frame(lapply(taxa, as.factor), stringsAsFactors =TRUE)
rownames(check) <- rownames(taxa)
check <- check[complete.cases(check),]
tmp <- taxo2phylog(as.taxo(check), root="Root", abbrev=F)

tax.phy <- as.phylo(tmp)


gg_tree <- ggtree(tax.phy, branch.length='none')
gg_tree

gg_tree[["data"]] <- gg_tree[["data"]] %>% 
  left_join(metadata %>%
               mutate(Taxon.mnemonic = ifelse(is.na(Taxon.mnemonic),
                                 "Simian virus 5", Taxon.mnemonic)) %>%
  mutate(Taxon.mnemonic = ifelse(Taxon.mnemonic == "null",
                                 `Proteome.ID`, Taxon.mnemonic)) %>%
    dplyr::select(Taxon.mnemonic, family), by = c("label" = "Taxon.mnemonic"))

gg_tree <-  gg_tree + geom_hilight(mapping=aes(subset = family %in% names(Family_palette_v2),fill = family), alpha = 0.8) +
   scale_fill_manual(values = Family_palette_v2, name = "Viral Family")


gg5 %>%
  insert_bottom(gg_tree + coord_flip(),height = 0.2)
ggsave(paste0(out_dir, "Figure5C.pdf"), width =15, height = 4)
```
